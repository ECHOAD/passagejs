/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { ConfigResponse, Addr, Config, ExecuteMsg, InstantiateMsg, QueryMsg, Timestamp, Uint64, QueryOptionsForTokenTimestampOffset, TokenTimestampOffset } from "./Minter.types";
import { MinterQueryClient } from "./Minter.client";
export interface MinterReactQuery<TResponse, TData = TResponse> {
  client: MinterQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MinterVaultTokensByUnstakeTimestampQuery<TData> extends MinterReactQuery<VaultTokensByUnstakeTimestampResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useMinterVaultTokensByUnstakeTimestampQuery<TData = VaultTokensByUnstakeTimestampResponse>({
  client,
  args,
  options
}: MinterVaultTokensByUnstakeTimestampQuery<TData>) {
  return useQuery<VaultTokensByUnstakeTimestampResponse, Error, TData>(["minterVaultTokensByUnstakeTimestamp", client.contractAddress, JSON.stringify(args)], () => client.vaultTokensByUnstakeTimestamp({
    queryOptions: args.queryOptions
  }), options);
}
export interface MinterVaultTokensByStakeTimestampQuery<TData> extends MinterReactQuery<VaultTokensByStakeTimestampResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useMinterVaultTokensByStakeTimestampQuery<TData = VaultTokensByStakeTimestampResponse>({
  client,
  args,
  options
}: MinterVaultTokensByStakeTimestampQuery<TData>) {
  return useQuery<VaultTokensByStakeTimestampResponse, Error, TData>(["minterVaultTokensByStakeTimestamp", client.contractAddress, JSON.stringify(args)], () => client.vaultTokensByStakeTimestamp({
    queryOptions: args.queryOptions
  }), options);
}
export interface MinterVaultTokensByOwnerQuery<TData> extends MinterReactQuery<VaultTokensByOwnerResponse, TData> {
  args: {
    owner: string;
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useMinterVaultTokensByOwnerQuery<TData = VaultTokensByOwnerResponse>({
  client,
  args,
  options
}: MinterVaultTokensByOwnerQuery<TData>) {
  return useQuery<VaultTokensByOwnerResponse, Error, TData>(["minterVaultTokensByOwner", client.contractAddress, JSON.stringify(args)], () => client.vaultTokensByOwner({
    owner: args.owner,
    queryOptions: args.queryOptions
  }), options);
}
export interface MinterVaultTokenQuery<TData> extends MinterReactQuery<VaultTokenResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useMinterVaultTokenQuery<TData = VaultTokenResponse>({
  client,
  args,
  options
}: MinterVaultTokenQuery<TData>) {
  return useQuery<VaultTokenResponse, Error, TData>(["minterVaultToken", client.contractAddress, JSON.stringify(args)], () => client.vaultToken({
    tokenId: args.tokenId
  }), options);
}
export interface MinterWithdrawHooksQuery<TData> extends MinterReactQuery<WithdrawHooksResponse, TData> {}
export function useMinterWithdrawHooksQuery<TData = WithdrawHooksResponse>({
  client,
  options
}: MinterWithdrawHooksQuery<TData>) {
  return useQuery<WithdrawHooksResponse, Error, TData>(["minterWithdrawHooks", client.contractAddress], () => client.withdrawHooks(), options);
}
export interface MinterUnstakeHooksQuery<TData> extends MinterReactQuery<UnstakeHooksResponse, TData> {}
export function useMinterUnstakeHooksQuery<TData = UnstakeHooksResponse>({
  client,
  options
}: MinterUnstakeHooksQuery<TData>) {
  return useQuery<UnstakeHooksResponse, Error, TData>(["minterUnstakeHooks", client.contractAddress], () => client.unstakeHooks(), options);
}
export interface MinterStakeHooksQuery<TData> extends MinterReactQuery<StakeHooksResponse, TData> {}
export function useMinterStakeHooksQuery<TData = StakeHooksResponse>({
  client,
  options
}: MinterStakeHooksQuery<TData>) {
  return useQuery<StakeHooksResponse, Error, TData>(["minterStakeHooks", client.contractAddress], () => client.stakeHooks(), options);
}
export interface MinterConfigQuery<TData> extends MinterReactQuery<ConfigResponse, TData> {}
export function useMinterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: MinterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["minterConfig", client.contractAddress], () => client.config(), options);
}