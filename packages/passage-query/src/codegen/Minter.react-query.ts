/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Timestamp, Uint64, Uint128, ConfigResponse, Coin, Addr, Config, ExecuteMsg, MintCountResponse, MintPriceResponse, MintableNumTokensResponse, QueryMsg, StartTimeResponse } from "./Minter.types";
import { MinterQueryClient } from "./Minter.client";
export interface MinterReactQuery<TResponse, TData = TResponse> {
  client: MinterQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MinterMintCountQuery<TData> extends MinterReactQuery<MintCountResponse, TData> {
  args: {
    address: string;
  };
}
export function useMinterMintCountQuery<TData = MintCountResponse>({
  client,
  args,
  options
}: MinterMintCountQuery<TData>) {
  return useQuery<MintCountResponse, Error, TData>({
    queryKey: ["minterMintCount", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.mintCount({ address: args.address }),
    ...options
  });
}
export interface MinterMintPriceQuery<TData> extends MinterReactQuery<MintPriceResponse, TData> {}
export function useMinterMintPriceQuery<TData = MintPriceResponse>({
  client,
  options
}: MinterMintPriceQuery<TData>) {
  return useQuery<MintPriceResponse, Error, TData>({
    queryKey: ["minterMintPrice", client.contractAddress],
    queryFn: () => client.mintPrice(),
    ...options
  });
}

export interface MinterStartTimeQuery<TData> extends MinterReactQuery<StartTimeResponse, TData> {}
export function useMinterStartTimeQuery<TData = StartTimeResponse>({
  client,
  options
}: MinterStartTimeQuery<TData>) {
  return useQuery<StartTimeResponse, Error, TData>({
    queryKey: ["minterStartTime", client.contractAddress],
    queryFn: () => client.startTime(),
    ...options
  });
}

export interface MinterMintableNumTokensQuery<TData> extends MinterReactQuery<MintableNumTokensResponse, TData> {}
export function useMinterMintableNumTokensQuery<TData = MintableNumTokensResponse>({
  client,
  options
}: MinterMintableNumTokensQuery<TData>) {
  return useQuery<MintableNumTokensResponse, Error, TData>({
    queryKey: ["minterMintableNumTokens", client.contractAddress],
    queryFn: () => client.mintableNumTokens(),
    ...options
  });
}

export interface MinterConfigQuery<TData> extends MinterReactQuery<ConfigResponse, TData> {}
export function useMinterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: MinterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>({
    queryKey: ["minterConfig", client.contractAddress],
    queryFn: () => client.config(),
    ...options

  });
}
