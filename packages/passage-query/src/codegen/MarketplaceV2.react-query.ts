/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { AskCountResponse, Timestamp, Uint64, Addr, Uint128, AskResponse, Ask, Coin, AsksResponse, BidResponse, Bid, BidsResponse, CollectionBidExpiryOffset, CollectionBidPriceOffset, CollectionBidResponse, CollectionBid, CollectionBidsResponse, Decimal, ConfigResponse, Config, ExpiryRange, ExecuteMsg, InstantiateMsg, MarketplaceContract, QueryMsg, QueryOptionsForTokenTimestampOffset, TokenTimestampOffset, QueryOptionsForTokenPriceOffset, TokenPriceOffset, QueryOptionsForBidExpiryOffset, BidExpiryOffset, QueryOptionsForBidTokenPriceOffset, BidTokenPriceOffset, QueryOptionsForCollectionBidPriceOffset, QueryOptionsForCollectionBidExpiryOffset } from "./MarketplaceV2.types";
import { MarketplaceV2QueryClient } from "./MarketplaceV2.client";
export interface MarketplaceV2ReactQuery<TResponse, TData = TResponse> {
  client: MarketplaceV2QueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MarketplaceV2CollectionBidsByExpiryQuery<TData> extends MarketplaceV2ReactQuery<CollectionBidsByExpiryResponse, TData> {
  args: {
    queryOptions: QueryOptionsForCollectionBidExpiryOffset;
  };
}
export function useMarketplaceV2CollectionBidsByExpiryQuery<TData = CollectionBidsByExpiryResponse>({
  client,
  args,
  options
}: MarketplaceV2CollectionBidsByExpiryQuery<TData>) {
  return useQuery<CollectionBidsByExpiryResponse, Error, TData>(["marketplaceV2CollectionBidsByExpiry", client.contractAddress, JSON.stringify(args)], () => client.collectionBidsByExpiry({
    queryOptions: args.queryOptions
  }), options);
}
export interface MarketplaceV2CollectionBidsByPriceQuery<TData> extends MarketplaceV2ReactQuery<CollectionBidsByPriceResponse, TData> {
  args: {
    queryOptions: QueryOptionsForCollectionBidPriceOffset;
  };
}
export function useMarketplaceV2CollectionBidsByPriceQuery<TData = CollectionBidsByPriceResponse>({
  client,
  args,
  options
}: MarketplaceV2CollectionBidsByPriceQuery<TData>) {
  return useQuery<CollectionBidsByPriceResponse, Error, TData>(["marketplaceV2CollectionBidsByPrice", client.contractAddress, JSON.stringify(args)], () => client.collectionBidsByPrice({
    queryOptions: args.queryOptions
  }), options);
}
export interface MarketplaceV2CollectionBidQuery<TData> extends MarketplaceV2ReactQuery<CollectionBidResponse, TData> {
  args: {
    bidder: string;
  };
}
export function useMarketplaceV2CollectionBidQuery<TData = CollectionBidResponse>({
  client,
  args,
  options
}: MarketplaceV2CollectionBidQuery<TData>) {
  return useQuery<CollectionBidResponse, Error, TData>(["marketplaceV2CollectionBid", client.contractAddress, JSON.stringify(args)], () => client.collectionBid({
    bidder: args.bidder
  }), options);
}
export interface MarketplaceV2BidsByBidderExpiryQuery<TData> extends MarketplaceV2ReactQuery<BidsByBidderExpiryResponse, TData> {
  args: {
    bidder: string;
    queryOptions: QueryOptionsForBidExpiryOffset;
  };
}
export function useMarketplaceV2BidsByBidderExpiryQuery<TData = BidsByBidderExpiryResponse>({
  client,
  args,
  options
}: MarketplaceV2BidsByBidderExpiryQuery<TData>) {
  return useQuery<BidsByBidderExpiryResponse, Error, TData>(["marketplaceV2BidsByBidderExpiry", client.contractAddress, JSON.stringify(args)], () => client.bidsByBidderExpiry({
    bidder: args.bidder,
    queryOptions: args.queryOptions
  }), options);
}
export interface MarketplaceV2BidsByTokenPriceQuery<TData> extends MarketplaceV2ReactQuery<BidsByTokenPriceResponse, TData> {
  args: {
    queryOptions: QueryOptionsForBidTokenPriceOffset;
    tokenId: string;
  };
}
export function useMarketplaceV2BidsByTokenPriceQuery<TData = BidsByTokenPriceResponse>({
  client,
  args,
  options
}: MarketplaceV2BidsByTokenPriceQuery<TData>) {
  return useQuery<BidsByTokenPriceResponse, Error, TData>(["marketplaceV2BidsByTokenPrice", client.contractAddress, JSON.stringify(args)], () => client.bidsByTokenPrice({
    queryOptions: args.queryOptions,
    tokenId: args.tokenId
  }), options);
}
export interface MarketplaceV2BidsSortedByExpiryQuery<TData> extends MarketplaceV2ReactQuery<BidsSortedByExpiryResponse, TData> {
  args: {
    queryOptions: QueryOptionsForBidExpiryOffset;
  };
}
export function useMarketplaceV2BidsSortedByExpiryQuery<TData = BidsSortedByExpiryResponse>({
  client,
  args,
  options
}: MarketplaceV2BidsSortedByExpiryQuery<TData>) {
  return useQuery<BidsSortedByExpiryResponse, Error, TData>(["marketplaceV2BidsSortedByExpiry", client.contractAddress, JSON.stringify(args)], () => client.bidsSortedByExpiry({
    queryOptions: args.queryOptions
  }), options);
}
export interface MarketplaceV2BidQuery<TData> extends MarketplaceV2ReactQuery<BidResponse, TData> {
  args: {
    bidder: string;
    tokenId: string;
  };
}
export function useMarketplaceV2BidQuery<TData = BidResponse>({
  client,
  args,
  options
}: MarketplaceV2BidQuery<TData>) {
  return useQuery<BidResponse, Error, TData>(["marketplaceV2Bid", client.contractAddress, JSON.stringify(args)], () => client.bid({
    bidder: args.bidder,
    tokenId: args.tokenId
  }), options);
}
export interface MarketplaceV2AskCountQuery<TData> extends MarketplaceV2ReactQuery<AskCountResponse, TData> {}
export function useMarketplaceV2AskCountQuery<TData = AskCountResponse>({
  client,
  options
}: MarketplaceV2AskCountQuery<TData>) {
  return useQuery<AskCountResponse, Error, TData>(["marketplaceV2AskCount", client.contractAddress], () => client.askCount(), options);
}
export interface MarketplaceV2AsksBySellerExpiryQuery<TData> extends MarketplaceV2ReactQuery<AsksBySellerExpiryResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
    seller: string;
  };
}
export function useMarketplaceV2AsksBySellerExpiryQuery<TData = AsksBySellerExpiryResponse>({
  client,
  args,
  options
}: MarketplaceV2AsksBySellerExpiryQuery<TData>) {
  return useQuery<AsksBySellerExpiryResponse, Error, TData>(["marketplaceV2AsksBySellerExpiry", client.contractAddress, JSON.stringify(args)], () => client.asksBySellerExpiry({
    queryOptions: args.queryOptions,
    seller: args.seller
  }), options);
}
export interface MarketplaceV2AsksSortedByPriceQuery<TData> extends MarketplaceV2ReactQuery<AsksSortedByPriceResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenPriceOffset;
  };
}
export function useMarketplaceV2AsksSortedByPriceQuery<TData = AsksSortedByPriceResponse>({
  client,
  args,
  options
}: MarketplaceV2AsksSortedByPriceQuery<TData>) {
  return useQuery<AsksSortedByPriceResponse, Error, TData>(["marketplaceV2AsksSortedByPrice", client.contractAddress, JSON.stringify(args)], () => client.asksSortedByPrice({
    queryOptions: args.queryOptions
  }), options);
}
export interface MarketplaceV2AsksSortedByExpiryQuery<TData> extends MarketplaceV2ReactQuery<AsksSortedByExpiryResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useMarketplaceV2AsksSortedByExpiryQuery<TData = AsksSortedByExpiryResponse>({
  client,
  args,
  options
}: MarketplaceV2AsksSortedByExpiryQuery<TData>) {
  return useQuery<AsksSortedByExpiryResponse, Error, TData>(["marketplaceV2AsksSortedByExpiry", client.contractAddress, JSON.stringify(args)], () => client.asksSortedByExpiry({
    queryOptions: args.queryOptions
  }), options);
}
export interface MarketplaceV2AskQuery<TData> extends MarketplaceV2ReactQuery<AskResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useMarketplaceV2AskQuery<TData = AskResponse>({
  client,
  args,
  options
}: MarketplaceV2AskQuery<TData>) {
  return useQuery<AskResponse, Error, TData>(["marketplaceV2Ask", client.contractAddress, JSON.stringify(args)], () => client.ask({
    tokenId: args.tokenId
  }), options);
}
export interface MarketplaceV2ConfigQuery<TData> extends MarketplaceV2ReactQuery<ConfigResponse, TData> {}
export function useMarketplaceV2ConfigQuery<TData = ConfigResponse>({
  client,
  options
}: MarketplaceV2ConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["marketplaceV2Config", client.contractAddress], () => client.config(), options);
}