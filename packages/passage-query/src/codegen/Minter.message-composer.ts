/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { ConfigResponse, Addr, Config, ExecuteMsg, InstantiateMsg, QueryMsg, Timestamp, Uint64, QueryOptionsForTokenTimestampOffset, TokenTimestampOffset } from "./Minter.types";
export interface MinterMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    label,
    operators,
    unstakePeriod
  }: {
    label?: string;
    operators?: string[];
    unstakePeriod?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addStakeHook: ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeStakeHook: ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addUnstakeHook: ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeUnstakeHook: ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addWithdrawHook: ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeWithdrawHook: ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  stake: ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unstake: ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdraw: ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MinterMsgComposer implements MinterMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.addStakeHook = this.addStakeHook.bind(this);
    this.removeStakeHook = this.removeStakeHook.bind(this);
    this.addUnstakeHook = this.addUnstakeHook.bind(this);
    this.removeUnstakeHook = this.removeUnstakeHook.bind(this);
    this.addWithdrawHook = this.addWithdrawHook.bind(this);
    this.removeWithdrawHook = this.removeWithdrawHook.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }

  updateConfig = ({
    label,
    operators,
    unstakePeriod
  }: {
    label?: string;
    operators?: string[];
    unstakePeriod?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            label,
            operators,
            unstake_period: unstakePeriod
          }
        })),
        funds: _funds
      })
    };
  };
  addStakeHook = ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_stake_hook: {
            hook
          }
        })),
        funds: _funds
      })
    };
  };
  removeStakeHook = ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_stake_hook: {
            hook
          }
        })),
        funds: _funds
      })
    };
  };
  addUnstakeHook = ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_unstake_hook: {
            hook
          }
        })),
        funds: _funds
      })
    };
  };
  removeUnstakeHook = ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_unstake_hook: {
            hook
          }
        })),
        funds: _funds
      })
    };
  };
  addWithdrawHook = ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_withdraw_hook: {
            hook
          }
        })),
        funds: _funds
      })
    };
  };
  removeWithdrawHook = ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_withdraw_hook: {
            hook
          }
        })),
        funds: _funds
      })
    };
  };
  stake = ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          stake: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  unstake = ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unstake: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  withdraw = ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
}