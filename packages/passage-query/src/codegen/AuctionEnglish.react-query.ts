/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Timestamp, Uint64, Addr, Uint128, AuctionStatus, AuctionResponse, Auction, AuctionBid, Coin, AuctionsResponse, Decimal, ConfigResponse, Config, ExecuteMsg, InstantiateMsg, QueryMsg, QueryOptionsForTokenTimestampOffset, TokenTimestampOffset, QueryOptionsForTokenPriceOffset, TokenPriceOffset } from "./AuctionEnglish.types";
import { AuctionEnglishQueryClient } from "./AuctionEnglish.client";
export interface AuctionEnglishReactQuery<TResponse, TData = TResponse> {
  client: AuctionEnglishQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface AuctionEnglishAuctionsByBidderEndTimeQuery<TData> extends AuctionEnglishReactQuery<AuctionsByBidderEndTimeResponse, TData> {
  args: {
    bidder: string;
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useAuctionEnglishAuctionsByBidderEndTimeQuery<TData = AuctionsByBidderEndTimeResponse>({
  client,
  args,
  options
}: AuctionEnglishAuctionsByBidderEndTimeQuery<TData>) {
  return useQuery<AuctionsByBidderEndTimeResponse, Error, TData>(["auctionEnglishAuctionsByBidderEndTime", client.contractAddress, JSON.stringify(args)], () => client.auctionsByBidderEndTime({
    bidder: args.bidder,
    queryOptions: args.queryOptions
  }), options);
}
export interface AuctionEnglishAuctionsBySellerEndTimeQuery<TData> extends AuctionEnglishReactQuery<AuctionsBySellerEndTimeResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
    seller: string;
  };
}
export function useAuctionEnglishAuctionsBySellerEndTimeQuery<TData = AuctionsBySellerEndTimeResponse>({
  client,
  args,
  options
}: AuctionEnglishAuctionsBySellerEndTimeQuery<TData>) {
  return useQuery<AuctionsBySellerEndTimeResponse, Error, TData>(["auctionEnglishAuctionsBySellerEndTime", client.contractAddress, JSON.stringify(args)], () => client.auctionsBySellerEndTime({
    queryOptions: args.queryOptions,
    seller: args.seller
  }), options);
}
export interface AuctionEnglishAuctionsByHighestBidPriceQuery<TData> extends AuctionEnglishReactQuery<AuctionsByHighestBidPriceResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenPriceOffset;
  };
}
export function useAuctionEnglishAuctionsByHighestBidPriceQuery<TData = AuctionsByHighestBidPriceResponse>({
  client,
  args,
  options
}: AuctionEnglishAuctionsByHighestBidPriceQuery<TData>) {
  return useQuery<AuctionsByHighestBidPriceResponse, Error, TData>(["auctionEnglishAuctionsByHighestBidPrice", client.contractAddress, JSON.stringify(args)], () => client.auctionsByHighestBidPrice({
    queryOptions: args.queryOptions
  }), options);
}
export interface AuctionEnglishAuctionsByEndTimeQuery<TData> extends AuctionEnglishReactQuery<AuctionsByEndTimeResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useAuctionEnglishAuctionsByEndTimeQuery<TData = AuctionsByEndTimeResponse>({
  client,
  args,
  options
}: AuctionEnglishAuctionsByEndTimeQuery<TData>) {
  return useQuery<AuctionsByEndTimeResponse, Error, TData>(["auctionEnglishAuctionsByEndTime", client.contractAddress, JSON.stringify(args)], () => client.auctionsByEndTime({
    queryOptions: args.queryOptions
  }), options);
}
export interface AuctionEnglishAuctionsByStartTimeQuery<TData> extends AuctionEnglishReactQuery<AuctionsByStartTimeResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useAuctionEnglishAuctionsByStartTimeQuery<TData = AuctionsByStartTimeResponse>({
  client,
  args,
  options
}: AuctionEnglishAuctionsByStartTimeQuery<TData>) {
  return useQuery<AuctionsByStartTimeResponse, Error, TData>(["auctionEnglishAuctionsByStartTime", client.contractAddress, JSON.stringify(args)], () => client.auctionsByStartTime({
    queryOptions: args.queryOptions
  }), options);
}
export interface AuctionEnglishAuctionQuery<TData> extends AuctionEnglishReactQuery<AuctionResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useAuctionEnglishAuctionQuery<TData = AuctionResponse>({
  client,
  args,
  options
}: AuctionEnglishAuctionQuery<TData>) {
  return useQuery<AuctionResponse, Error, TData>(["auctionEnglishAuction", client.contractAddress, JSON.stringify(args)], () => client.auction({
    tokenId: args.tokenId
  }), options);
}
export interface AuctionEnglishConfigQuery<TData> extends AuctionEnglishReactQuery<ConfigResponse, TData> {}
export function useAuctionEnglishConfigQuery<TData = ConfigResponse>({
  client,
  options
}: AuctionEnglishConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["auctionEnglishConfig", client.contractAddress], () => client.config(), options);
}