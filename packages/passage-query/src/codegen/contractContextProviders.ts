/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { IQueryClientProvider, ISigningClientProvider, IMessageComposerProvider } from "./contractContextBase";
import { Pg721QueryClient } from "./Pg721.client";
import { Pg721 } from "./Pg721.provider";
import { PG721MetadataOnChainQueryClient } from "./PG721MetadataOnChain.client";
import { PG721MetadataOnChainClient } from "./PG721MetadataOnChain.client";
import { PG721MetadataOnChainMsgComposer } from "./PG721MetadataOnChain.message-composer";
import { PG721MetadataOnChain } from "./PG721MetadataOnChain.provider";
import { MinterQueryClient } from "./Minter.client";
import { MinterClient } from "./Minter.client";
import { MinterMsgComposer } from "./Minter.message-composer";
import { Minter } from "./Minter.provider";
import { WhitelistQueryClient } from "./Whitelist.client";
import { WhitelistClient } from "./Whitelist.client";
import { WhitelistMsgComposer } from "./Whitelist.message-composer";
import { Whitelist } from "./Whitelist.provider";
import { MarketplaceQueryClient } from "./Marketplace.client";
import { MarketplaceClient } from "./Marketplace.client";
import { MarketplaceMsgComposer } from "./Marketplace.message-composer";
import { Marketplace } from "./Marketplace.provider";
import { MarketplaceV2QueryClient } from "./MarketplaceV2.client";
import { MarketplaceV2Client } from "./MarketplaceV2.client";
import { MarketplaceV2MsgComposer } from "./MarketplaceV2.message-composer";
import { MarketplaceV2 } from "./MarketplaceV2.provider";
export interface IContractsContext {
  pg721: IQueryClientProvider<Pg721QueryClient>;
  pG721MetadataOnChain: IQueryClientProvider<PG721MetadataOnChainQueryClient> & ISigningClientProvider<PG721MetadataOnChainClient> & IMessageComposerProvider<PG721MetadataOnChainMsgComposer>;
  minter: IQueryClientProvider<MinterQueryClient> & ISigningClientProvider<MinterClient> & IMessageComposerProvider<MinterMsgComposer>;
  whitelist: IQueryClientProvider<WhitelistQueryClient> & ISigningClientProvider<WhitelistClient> & IMessageComposerProvider<WhitelistMsgComposer>;
  marketplace: IQueryClientProvider<MarketplaceQueryClient> & ISigningClientProvider<MarketplaceClient> & IMessageComposerProvider<MarketplaceMsgComposer>;
  marketplaceV2: IQueryClientProvider<MarketplaceV2QueryClient> & ISigningClientProvider<MarketplaceV2Client> & IMessageComposerProvider<MarketplaceV2MsgComposer>;
}
export const getProviders = (address?: string, cosmWasmClient?: CosmWasmClient, signingCosmWasmClient?: SigningCosmWasmClient) => ({
  pg721: new Pg721({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  pG721MetadataOnChain: new PG721MetadataOnChain({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  minter: new Minter({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  whitelist: new Whitelist({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  marketplace: new Marketplace({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  marketplaceV2: new MarketplaceV2({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  })
});