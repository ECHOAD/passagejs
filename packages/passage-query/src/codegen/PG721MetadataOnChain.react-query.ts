/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForMetadata, Metadata, Trait, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, Decimal, CollectionInfoResponse, RoyaltyInfoResponse, ContractInfoResponse, ExecuteMsgForNullable_Metadata, Binary, MintMsgForNullable_Metadata, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./PG721MetadataOnChain.types";
import { PG721MetadataOnChainQueryClient } from "./PG721MetadataOnChain.client";
export interface PG721MetadataOnChainReactQuery<TResponse, TData = TResponse> {
  client: PG721MetadataOnChainQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface PG721MetadataOnChainCollectionInfoQuery<TData> extends PG721MetadataOnChainReactQuery<CollectionInfoResponse, TData> {}
export function usePG721MetadataOnChainCollectionInfoQuery<TData = CollectionInfoResponse>({
  client,
  options
}: PG721MetadataOnChainCollectionInfoQuery<TData>) {
  return useQuery<CollectionInfoResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainCollectionInfo", client.contractAddress],
    queryFn: () => client.collectionInfo(),
    ...options
  });
}
export interface PG721MetadataOnChainMinterQuery<TData> extends PG721MetadataOnChainReactQuery<MinterResponse, TData> {}
export function usePG721MetadataOnChainMinterQuery<TData = MinterResponse>({
                                                                             client,
                                                                             options
                                                                           }: PG721MetadataOnChainMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainMinter", client.contractAddress],
    queryFn: () => client.minter(),
    ...options
  });
}

export interface PG721MetadataOnChainAllTokensQuery<TData> extends PG721MetadataOnChainReactQuery<AllTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function usePG721MetadataOnChainAllTokensQuery<TData = AllTokensResponse>({
                                                                                   client,
                                                                                   args,
                                                                                   options
                                                                                 }: PG721MetadataOnChainAllTokensQuery<TData>) {
  return useQuery<AllTokensResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainAllTokens", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.allTokens(args),
    ...options
  });
}

export interface PG721MetadataOnChainTokensQuery<TData> extends PG721MetadataOnChainReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function usePG721MetadataOnChainTokensQuery<TData = TokensResponse>({
                                                                             client,
                                                                             args,
                                                                             options
                                                                           }: PG721MetadataOnChainTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainTokens", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.tokens(args),
    ...options
  });
}

export interface PG721MetadataOnChainAllNftInfoQuery<TData> extends PG721MetadataOnChainReactQuery<AllNftInfoResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function usePG721MetadataOnChainAllNftInfoQuery<TData = AllNftInfoResponse>({
                                                                                     client,
                                                                                     args,
                                                                                     options
                                                                                   }: PG721MetadataOnChainAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainAllNftInfo", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.allNftInfo(args),
    ...options
  });
}

export interface PG721MetadataOnChainNftInfoQuery<TData> extends PG721MetadataOnChainReactQuery<NftInfoResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function usePG721MetadataOnChainNftInfoQuery<TData = NftInfoResponse>({
                                                                               client,
                                                                               args,
                                                                               options
                                                                             }: PG721MetadataOnChainNftInfoQuery<TData>) {
  return useQuery<NftInfoResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainNftInfo", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.nftInfo(args),
    ...options
  });
}

export interface PG721MetadataOnChainContractInfoQuery<TData> extends PG721MetadataOnChainReactQuery<ContractInfoResponse, TData> {}
export function usePG721MetadataOnChainContractInfoQuery<TData = ContractInfoResponse>({
                                                                                         client,
                                                                                         options
                                                                                       }: PG721MetadataOnChainContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainContractInfo", client.contractAddress],
    queryFn: () => client.contractInfo(),
    ...options
  });
}

export interface PG721MetadataOnChainNumTokensQuery<TData> extends PG721MetadataOnChainReactQuery<NumTokensResponse, TData> {}
export function usePG721MetadataOnChainNumTokensQuery<TData = NumTokensResponse>({
                                                                                   client,
                                                                                   options
                                                                                 }: PG721MetadataOnChainNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainNumTokens", client.contractAddress],
    queryFn: () => client.numTokens(),
    ...options
  });
}

export interface PG721MetadataOnChainAllOperatorsQuery<TData> extends PG721MetadataOnChainReactQuery<AllOperatorsResponse, TData> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function usePG721MetadataOnChainAllOperatorsQuery<TData = AllOperatorsResponse>({
                                                                                         client,
                                                                                         args,
                                                                                         options
                                                                                       }: PG721MetadataOnChainAllOperatorsQuery<TData>) {
  return useQuery<AllOperatorsResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainAllOperators", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.allOperators(args),
    ...options
  });
}

export interface PG721MetadataOnChainApprovalsQuery<TData> extends PG721MetadataOnChainReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function usePG721MetadataOnChainApprovalsQuery<TData = ApprovalsResponse>({
                                                                                   client,
                                                                                   args,
                                                                                   options
                                                                                 }: PG721MetadataOnChainApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainApprovals", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.approvals(args),
    ...options
  });
}

export interface PG721MetadataOnChainApprovalQuery<TData> extends PG721MetadataOnChainReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function usePG721MetadataOnChainApprovalQuery<TData = ApprovalResponse>({
                                                                                 client,
                                                                                 args,
                                                                                 options
                                                                               }: PG721MetadataOnChainApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainApproval", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.approval(args),
    ...options
  });
}

export interface PG721MetadataOnChainOwnerOfQuery<TData> extends PG721MetadataOnChainReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function usePG721MetadataOnChainOwnerOfQuery<TData = OwnerOfResponse>({
                                                                               client,
                                                                               args,
                                                                               options
                                                                             }: PG721MetadataOnChainOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>({
    queryKey: ["pG721MetadataOnChainOwnerOf", client.contractAddress, JSON.stringify(args)],
    queryFn: () => client.ownerOf(args),
    ...options
  });
}
