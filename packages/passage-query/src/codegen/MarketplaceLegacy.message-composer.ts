/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, Decimal, Config, ExecuteMsg, Uint128, Token, InstantiateMsg, QueryMsg } from "./MarketplaceLegacy.types";
export interface MarketplaceLegacyMsg {
  contractAddress: string;
  sender: string;
  buy: ({
    recipient,
    tokenId
  }: {
    recipient?: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  listTokens: ({
    tokens
  }: {
    tokens: Token[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  delistTokens: ({
    tokens
  }: {
    tokens: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updatePrice: ({
    price,
    token
  }: {
    price: Uint128;
    token: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin,
    allowedNative,
    collectorAddr,
    feePercentage,
    nftAddr
  }: {
    admin?: string;
    allowedNative?: string;
    collectorAddr?: string;
    feePercentage?: Decimal;
    nftAddr?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MarketplaceLegacyMsgComposer implements MarketplaceLegacyMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.buy = this.buy.bind(this);
    this.listTokens = this.listTokens.bind(this);
    this.delistTokens = this.delistTokens.bind(this);
    this.updatePrice = this.updatePrice.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  buy = ({
    recipient,
    tokenId
  }: {
    recipient?: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          buy: {
            recipient,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  listTokens = ({
    tokens
  }: {
    tokens: Token[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          list_tokens: {
            tokens
          }
        })),
        funds: _funds
      })
    };
  };
  delistTokens = ({
    tokens
  }: {
    tokens: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          delist_tokens: {
            tokens
          }
        })),
        funds: _funds
      })
    };
  };
  updatePrice = ({
    price,
    token
  }: {
    price: Uint128;
    token: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_price: {
            price,
            token
          }
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    admin,
    allowedNative,
    collectorAddr,
    feePercentage,
    nftAddr
  }: {
    admin?: string;
    allowedNative?: string;
    collectorAddr?: string;
    feePercentage?: Decimal;
    nftAddr?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin,
            allowed_native: allowedNative,
            collector_addr: collectorAddr,
            fee_percentage: feePercentage,
            nft_addr: nftAddr
          }
        })),
        funds: _funds
      })
    };
  };
}