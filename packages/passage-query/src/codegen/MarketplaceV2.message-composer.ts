/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AskCountResponse, Timestamp, Uint64, Addr, Uint128, AskResponse, Ask, Coin, AsksResponse, BidResponse, Bid, BidsResponse, CollectionBidExpiryOffset, CollectionBidPriceOffset, CollectionBidResponse, CollectionBid, CollectionBidsResponse, Decimal, ConfigResponse, Config, ExpiryRange, ExecuteMsg, InstantiateMsg, MarketplaceContract, QueryMsg, QueryOptionsForTokenTimestampOffset, TokenTimestampOffset, QueryOptionsForTokenPriceOffset, TokenPriceOffset, QueryOptionsForBidExpiryOffset, BidExpiryOffset, QueryOptionsForBidTokenPriceOffset, BidTokenPriceOffset, QueryOptionsForCollectionBidPriceOffset, QueryOptionsForCollectionBidExpiryOffset } from "./MarketplaceV2.types";
export interface MarketplaceV2Msg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    askExpiry,
    bidExpiry,
    minPrice,
    operators,
    tradingFeeBps
  }: {
    askExpiry?: ExpiryRange;
    bidExpiry?: ExpiryRange;
    minPrice?: Uint128;
    operators?: string[];
    tradingFeeBps?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setAsk: ({
    expiresAt,
    fundsRecipient,
    price,
    reserveFor,
    tokenId
  }: {
    expiresAt: Timestamp;
    fundsRecipient?: string;
    price: Coin;
    reserveFor?: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeAsk: ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setBid: ({
    expiresAt,
    price,
    tokenId
  }: {
    expiresAt: Timestamp;
    price: Coin;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeBid: ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptBid: ({
    bidder,
    tokenId
  }: {
    bidder: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setCollectionBid: ({
    expiresAt,
    price,
    units
  }: {
    expiresAt: Timestamp;
    price: Coin;
    units: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCollectionBid: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptCollectionBid: ({
    bidder,
    tokenId
  }: {
    bidder: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MarketplaceV2MsgComposer implements MarketplaceV2Msg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.setAsk = this.setAsk.bind(this);
    this.removeAsk = this.removeAsk.bind(this);
    this.setBid = this.setBid.bind(this);
    this.removeBid = this.removeBid.bind(this);
    this.acceptBid = this.acceptBid.bind(this);
    this.setCollectionBid = this.setCollectionBid.bind(this);
    this.removeCollectionBid = this.removeCollectionBid.bind(this);
    this.acceptCollectionBid = this.acceptCollectionBid.bind(this);
  }

  updateConfig = ({
    askExpiry,
    bidExpiry,
    minPrice,
    operators,
    tradingFeeBps
  }: {
    askExpiry?: ExpiryRange;
    bidExpiry?: ExpiryRange;
    minPrice?: Uint128;
    operators?: string[];
    tradingFeeBps?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            ask_expiry: askExpiry,
            bid_expiry: bidExpiry,
            min_price: minPrice,
            operators,
            trading_fee_bps: tradingFeeBps
          }
        })),
        funds: _funds
      })
    };
  };
  setAsk = ({
    expiresAt,
    fundsRecipient,
    price,
    reserveFor,
    tokenId
  }: {
    expiresAt: Timestamp;
    fundsRecipient?: string;
    price: Coin;
    reserveFor?: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_ask: {
            expires_at: expiresAt,
            funds_recipient: fundsRecipient,
            price,
            reserve_for: reserveFor,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  removeAsk = ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_ask: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  setBid = ({
    expiresAt,
    price,
    tokenId
  }: {
    expiresAt: Timestamp;
    price: Coin;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_bid: {
            expires_at: expiresAt,
            price,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  removeBid = ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_bid: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  acceptBid = ({
    bidder,
    tokenId
  }: {
    bidder: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_bid: {
            bidder,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  setCollectionBid = ({
    expiresAt,
    price,
    units
  }: {
    expiresAt: Timestamp;
    price: Coin;
    units: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_collection_bid: {
            expires_at: expiresAt,
            price,
            units
          }
        })),
        funds: _funds
      })
    };
  };
  removeCollectionBid = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_collection_bid: {}
        })),
        funds: _funds
      })
    };
  };
  acceptCollectionBid = ({
    bidder,
    tokenId
  }: {
    bidder: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_collection_bid: {
            bidder,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
}