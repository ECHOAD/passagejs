/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import * as _0 from "./AuctionEnglish.types";
import * as _1 from "./AuctionEnglish.client";
import * as _2 from "./AuctionEnglish.message-composer";
import * as _3 from "./AuctionEnglish.react-query";
import * as _4 from "./AuctionEnglish.provider";
import * as _6 from "./MarketplaceLegacy.client";
import * as _7 from "./MarketplaceLegacy.message-composer";
import * as _8 from "./MarketplaceLegacy.react-query";
import * as _9 from "./MarketplaceLegacy.provider";
import * as _10 from "./MarketplaceV2.types";
import * as _11 from "./MarketplaceV2.client";
import * as _12 from "./MarketplaceV2.message-composer";
import * as _13 from "./MarketplaceV2.react-query";
import * as _14 from "./MarketplaceV2.provider";
import * as _15 from "./MinterMetadataOnChain.types";
import * as _16 from "./MinterMetadataOnChain.client";
import * as _17 from "./MinterMetadataOnChain.message-composer";
import * as _18 from "./MinterMetadataOnChain.react-query";
import * as _19 from "./MinterMetadataOnChain.provider";
import * as _20 from "./Minter.types";
import * as _21 from "./Minter.client";
import * as _22 from "./Minter.message-composer";
import * as _23 from "./Minter.react-query";
import * as _24 from "./Minter.provider";
import * as _25 from "./PG721Legacy.types";
import * as _26 from "./PG721Legacy.client";
import * as _27 from "./PG721Legacy.message-composer";
import * as _28 from "./PG721Legacy.react-query";
import * as _29 from "./PG721Legacy.provider";
import * as _35 from "./PG721MetadataOnChain.types";
import * as _36 from "./PG721MetadataOnChain.client";
import * as _37 from "./PG721MetadataOnChain.message-composer";
import * as _38 from "./PG721MetadataOnChain.react-query";
import * as _39 from "./PG721MetadataOnChain.provider";
import * as _40 from "./Pg721.types";
import * as _41 from "./Pg721.client";
import * as _42 from "./Pg721.message-composer";
import * as _43 from "./Pg721.react-query";
import * as _44 from "./Pg721.provider";
import * as _45 from "./RoyaltyGroup.types";
import * as _46 from "./RoyaltyGroup.client";
import * as _47 from "./RoyaltyGroup.message-composer";
import * as _48 from "./RoyaltyGroup.react-query";
import * as _49 from "./RoyaltyGroup.provider";
import * as _50 from "./Whitelist.types";
import * as _51 from "./Whitelist.client";
import * as _52 from "./Whitelist.message-composer";
import * as _53 from "./Whitelist.react-query";
import * as _54 from "./Whitelist.provider";
import * as _55 from "./contractContextProviders";
import * as _56 from "./contractContextBase";
import * as _57 from "./contracts-context";
export declare namespace contracts {
    const AuctionEnglish: {
        AuctionEnglish: typeof _4.AuctionEnglish;
        useAuctionEnglishAuctionsByBidderEndTimeQuery<TData = AuctionsByBidderEndTimeResponse>({ client, args, options }: _3.AuctionEnglishAuctionsByBidderEndTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useAuctionEnglishAuctionsBySellerEndTimeQuery<TData = AuctionsBySellerEndTimeResponse>({ client, args, options }: _3.AuctionEnglishAuctionsBySellerEndTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useAuctionEnglishAuctionsByHighestBidPriceQuery<TData = AuctionsByHighestBidPriceResponse>({ client, args, options }: _3.AuctionEnglishAuctionsByHighestBidPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useAuctionEnglishAuctionsByEndTimeQuery<TData = AuctionsByEndTimeResponse>({ client, args, options }: _3.AuctionEnglishAuctionsByEndTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useAuctionEnglishAuctionsByStartTimeQuery<TData = AuctionsByStartTimeResponse>({ client, args, options }: _3.AuctionEnglishAuctionsByStartTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useAuctionEnglishAuctionQuery<TData = _0.AuctionResponse>({ client, args, options }: _3.AuctionEnglishAuctionQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useAuctionEnglishConfigQuery<TData = _0.ConfigResponse>({ client, options }: _3.AuctionEnglishConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        AuctionEnglishMsgComposer: typeof _2.AuctionEnglishMsgComposer;
        AuctionEnglishQueryClient: typeof _1.AuctionEnglishQueryClient;
        AuctionEnglishClient: typeof _1.AuctionEnglishClient;
    };
    const MarketplaceLegacy: {
        MarketplaceLegacy: typeof _9.MarketplaceLegacy;
        useMarketplaceLegacyListTokensOnSaleQuery<TData = ListTokensOnSaleResponse>({ client, args, options }: _8.MarketplaceLegacyListTokensOnSaleQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceLegacyListTokensQuery<TData = ListTokensResponse>({ client, args, options }: _8.MarketplaceLegacyListTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceLegacyRangeTokensQuery<TData = RangeTokensResponse>({ client, args, options }: _8.MarketplaceLegacyRangeTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceLegacyTokenQuery<TData = TokenResponse>({ client, args, options }: _8.MarketplaceLegacyTokenQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceLegacyConfigQuery<TData = ConfigResponse>({ client, options }: _8.MarketplaceLegacyConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        MarketplaceLegacyMsgComposer: typeof _7.MarketplaceLegacyMsgComposer;
        MarketplaceLegacyQueryClient: typeof _6.MarketplaceLegacyQueryClient;
        MarketplaceLegacyClient: typeof _6.MarketplaceLegacyClient;
    };
    const MarketplaceV2: {
        MarketplaceV2: typeof _14.MarketplaceV2;
        useMarketplaceV2CollectionBidsByExpiryQuery<TData = CollectionBidsByExpiryResponse>({ client, args, options }: _13.MarketplaceV2CollectionBidsByExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2CollectionBidsByPriceQuery<TData = CollectionBidsByPriceResponse>({ client, args, options }: _13.MarketplaceV2CollectionBidsByPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2CollectionBidQuery<TData = _10.CollectionBidResponse>({ client, args, options }: _13.MarketplaceV2CollectionBidQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2BidsByBidderExpiryQuery<TData = BidsByBidderExpiryResponse>({ client, args, options }: _13.MarketplaceV2BidsByBidderExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2BidsByTokenPriceQuery<TData = BidsByTokenPriceResponse>({ client, args, options }: _13.MarketplaceV2BidsByTokenPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2BidsSortedByExpiryQuery<TData = BidsSortedByExpiryResponse>({ client, args, options }: _13.MarketplaceV2BidsSortedByExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2BidQuery<TData = _10.BidResponse>({ client, args, options }: _13.MarketplaceV2BidQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AskCountQuery<TData = _10.AskCountResponse>({ client, options }: _13.MarketplaceV2AskCountQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AsksBySellerExpiryQuery<TData = AsksBySellerExpiryResponse>({ client, args, options }: _13.MarketplaceV2AsksBySellerExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AsksSortedByPriceQuery<TData = AsksSortedByPriceResponse>({ client, args, options }: _13.MarketplaceV2AsksSortedByPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AsksSortedByExpiryQuery<TData = AsksSortedByExpiryResponse>({ client, args, options }: _13.MarketplaceV2AsksSortedByExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AskQuery<TData = _10.AskResponse>({ client, args, options }: _13.MarketplaceV2AskQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2ConfigQuery<TData = _10.ConfigResponse>({ client, options }: _13.MarketplaceV2ConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        MarketplaceV2MsgComposer: typeof _12.MarketplaceV2MsgComposer;
        MarketplaceV2QueryClient: typeof _11.MarketplaceV2QueryClient;
        MarketplaceV2Client: typeof _11.MarketplaceV2Client;
    };
    const MinterMetadataOnChain: {
        MinterMetadataOnChain: typeof _19.MinterMetadataOnChain;
        useMinterMetadataOnChainTokenMintsQuery<TData = TokenMintsResponse>({ client, args, options }: _18.MinterMetadataOnChainTokenMintsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMetadataOnChainTokenMintQuery<TData = TokenMintResponse>({ client, args, options }: _18.MinterMetadataOnChainTokenMintQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMetadataOnChainMintCountQuery<TData = MintCountResponse>({ client, args, options }: _18.MinterMetadataOnChainMintCountQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMetadataOnChainMintPriceQuery<TData = MintPriceResponse>({ client, options }: _18.MinterMetadataOnChainMintPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMetadataOnChainStartTimeQuery<TData = StartTimeResponse>({ client, options }: _18.MinterMetadataOnChainStartTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMetadataOnChainNumRemainingQuery<TData = NumRemainingResponse>({ client, options }: _18.MinterMetadataOnChainNumRemainingQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMetadataOnChainNumMintedQuery<TData = NumMintedResponse>({ client, options }: _18.MinterMetadataOnChainNumMintedQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMetadataOnChainConfigQuery<TData = _15.ConfigResponse>({ client, options }: _18.MinterMetadataOnChainConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        MinterMetadataOnChainMsgComposer: typeof _17.MinterMetadataOnChainMsgComposer;
        MinterMetadataOnChainQueryClient: typeof _16.MinterMetadataOnChainQueryClient;
        MinterMetadataOnChainClient: typeof _16.MinterMetadataOnChainClient;
    };
    const Minter: {
        Minter: typeof _24.Minter;
        useMinterVaultTokensByUnstakeTimestampQuery<TData = VaultTokensByUnstakeTimestampResponse>({ client, args, options }: _23.MinterVaultTokensByUnstakeTimestampQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterVaultTokensByStakeTimestampQuery<TData = VaultTokensByStakeTimestampResponse>({ client, args, options }: _23.MinterVaultTokensByStakeTimestampQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterVaultTokensByOwnerQuery<TData = VaultTokensByOwnerResponse>({ client, args, options }: _23.MinterVaultTokensByOwnerQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterVaultTokenQuery<TData = VaultTokenResponse>({ client, args, options }: _23.MinterVaultTokenQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterWithdrawHooksQuery<TData = WithdrawHooksResponse>({ client, options }: _23.MinterWithdrawHooksQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterUnstakeHooksQuery<TData = UnstakeHooksResponse>({ client, options }: _23.MinterUnstakeHooksQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterStakeHooksQuery<TData = StakeHooksResponse>({ client, options }: _23.MinterStakeHooksQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterConfigQuery<TData = _20.ConfigResponse>({ client, options }: _23.MinterConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        MinterMsgComposer: typeof _22.MinterMsgComposer;
        MinterQueryClient: typeof _21.MinterQueryClient;
        MinterClient: typeof _21.MinterClient;
    };
    const PG721Legacy: {
        PG721Legacy: typeof _29.PG721Legacy;
        usePG721LegacyMinterQuery<TData = _25.MinterResponse>({ client, options }: _28.PG721LegacyMinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyAllTokensQuery<TData = AllTokensResponse>({ client, args, options }: _28.PG721LegacyAllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyTokensQuery<TData = _25.TokensResponse>({ client, args, options }: _28.PG721LegacyTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyAllNftInfoQuery<TData = _25.AllNftInfoResponse>({ client, args, options }: _28.PG721LegacyAllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyNftInfoQuery<TData = _25.NftInfoResponse>({ client, args, options }: _28.PG721LegacyNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyContractInfoQuery<TData = _25.ContractInfoResponse>({ client, options }: _28.PG721LegacyContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyNumTokensQuery<TData = _25.NumTokensResponse>({ client, options }: _28.PG721LegacyNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyAllOperatorsQuery<TData = AllOperatorsResponse>({ client, args, options }: _28.PG721LegacyAllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyApprovalsQuery<TData = _25.ApprovalsResponse>({ client, args, options }: _28.PG721LegacyApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyApprovalQuery<TData = _25.ApprovalResponse>({ client, args, options }: _28.PG721LegacyApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyOwnerOfQuery<TData = _25.OwnerOfResponse>({ client, args, options }: _28.PG721LegacyOwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        PG721LegacyMsgComposer: typeof _27.PG721LegacyMsgComposer;
        PG721LegacyQueryClient: typeof _26.PG721LegacyQueryClient;
        PG721LegacyClient: typeof _26.PG721LegacyClient;
    };
    const PG721MetadataOnChain: {
        PG721MetadataOnChain: typeof _39.PG721MetadataOnChain;
        usePG721MetadataOnChainCollectionInfoQuery<TData = _35.CollectionInfoResponse>({ client, options }: _38.PG721MetadataOnChainCollectionInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainMinterQuery<TData = _35.MinterResponse>({ client, options }: _38.PG721MetadataOnChainMinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllTokensQuery<TData = _35.AllTokensResponse>({ client, args, options }: _38.PG721MetadataOnChainAllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainTokensQuery<TData = _35.TokensResponse>({ client, args, options }: _38.PG721MetadataOnChainTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllNftInfoQuery<TData = _35.AllNftInfoResponse>({ client, args, options }: _38.PG721MetadataOnChainAllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainNftInfoQuery<TData = _35.NftInfoResponse>({ client, args, options }: _38.PG721MetadataOnChainNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainContractInfoQuery<TData = _35.ContractInfoResponse>({ client, options }: _38.PG721MetadataOnChainContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainNumTokensQuery<TData = _35.NumTokensResponse>({ client, options }: _38.PG721MetadataOnChainNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllOperatorsQuery<TData = _35.AllOperatorsResponse>({ client, args, options }: _38.PG721MetadataOnChainAllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainApprovalsQuery<TData = _35.ApprovalsResponse>({ client, args, options }: _38.PG721MetadataOnChainApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainApprovalQuery<TData = _35.ApprovalResponse>({ client, args, options }: _38.PG721MetadataOnChainApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainOwnerOfQuery<TData = _35.OwnerOfResponse>({ client, args, options }: _38.PG721MetadataOnChainOwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        PG721MetadataOnChainMsgComposer: typeof _37.PG721MetadataOnChainMsgComposer;
        PG721MetadataOnChainQueryClient: typeof _36.PG721MetadataOnChainQueryClient;
        PG721MetadataOnChainClient: typeof _36.PG721MetadataOnChainClient;
    };
    const Pg721: {
        Pg721: typeof _44.Pg721;
        usePg721CollectionInfoQuery<TData = _40.CollectionInfoResponse>({ client, options }: _43.Pg721CollectionInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721MinterQuery<TData = _40.MinterResponse>({ client, options }: _43.Pg721MinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllTokensQuery<TData = _40.AllTokensResponse>({ client, args, options }: _43.Pg721AllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721TokensQuery<TData = _40.TokensResponse>({ client, args, options }: _43.Pg721TokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllNftInfoQuery<TData = _40.AllNftInfoResponse>({ client, args, options }: _43.Pg721AllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721NftInfoQuery<TData = _40.NftInfoResponse>({ client, args, options }: _43.Pg721NftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ContractInfoQuery<TData = _40.ContractInfoResponse>({ client, options }: _43.Pg721ContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721NumTokensQuery<TData = _40.NumTokensResponse>({ client, options }: _43.Pg721NumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllOperatorsQuery<TData = _40.AllOperatorsResponse>({ client, args, options }: _43.Pg721AllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ApprovalsQuery<TData = _40.ApprovalsResponse>({ client, args, options }: _43.Pg721ApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ApprovalQuery<TData = _40.ApprovalResponse>({ client, args, options }: _43.Pg721ApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721OwnerOfQuery<TData = _40.OwnerOfResponse>({ client, args, options }: _43.Pg721OwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        Pg721MsgComposer: typeof _42.Pg721MsgComposer;
        Pg721QueryClient: typeof _41.Pg721QueryClient;
        Pg721Client: typeof _41.Pg721Client;
    };
    const RoyaltyGroup: {
        RoyaltyGroup: typeof _49.RoyaltyGroup;
        useRoyaltyGroupHooksQuery<TData = HooksResponse>({ client, options }: _48.RoyaltyGroupHooksQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupMemberQuery<TData = _45.MemberResponse>({ client, args, options }: _48.RoyaltyGroupMemberQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupListMembersQuery<TData = ListMembersResponse>({ client, args, options }: _48.RoyaltyGroupListMembersQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupTotalWeightQuery<TData = _45.TotalWeightResponse>({ client, options }: _48.RoyaltyGroupTotalWeightQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupAdminQuery<TData = _45.AdminResponse>({ client, options }: _48.RoyaltyGroupAdminQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        RoyaltyGroupMsgComposer: typeof _47.RoyaltyGroupMsgComposer;
        RoyaltyGroupQueryClient: typeof _46.RoyaltyGroupQueryClient;
        RoyaltyGroupClient: typeof _46.RoyaltyGroupClient;
    };
    const Whitelist: {
        Whitelist: typeof _54.Whitelist;
        useWhitelistConfigQuery<TData = _50.ConfigResponse>({ client, options }: _53.WhitelistConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasMemberQuery<TData = HasMemberResponse>({ client, args, options }: _53.WhitelistHasMemberQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistMembersQuery<TData = _50.MembersResponse>({ client, args, options }: _53.WhitelistMembersQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistIsActiveQuery<TData = IsActiveResponse>({ client, options }: _53.WhitelistIsActiveQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasEndedQuery<TData = HasEndedResponse>({ client, options }: _53.WhitelistHasEndedQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasStartedQuery<TData = HasStartedResponse>({ client, options }: _53.WhitelistHasStartedQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        WhitelistMsgComposer: typeof _52.WhitelistMsgComposer;
        WhitelistQueryClient: typeof _51.WhitelistQueryClient;
        WhitelistClient: typeof _51.WhitelistClient;
    };
    const contractContextProviders: {
        getProviders: (address?: string, cosmWasmClient?: import("@cosmjs/cosmwasm-stargate").CosmWasmClient, signingCosmWasmClient?: import("@cosmjs/cosmwasm-stargate").SigningCosmWasmClient) => {
            auctionEnglish: _4.AuctionEnglish;
            marketplaceLegacy: _9.MarketplaceLegacy;
            marketplaceV2: _14.MarketplaceV2;
            minterMetadataOnChain: _19.MinterMetadataOnChain;
            minter: _24.Minter;
            pG721Legacy: _29.PG721Legacy;
            pG721MetadataOnChain: _39.PG721MetadataOnChain;
            pg721: _44.Pg721;
            royaltyGroup: _49.RoyaltyGroup;
            whitelist: _54.Whitelist;
        };
    };
    const contractContextBase: {
        NO_SINGING_ERROR_MESSAGE: "signingCosmWasmClient not connected";
        NO_COSMWASW_CLIENT_ERROR_MESSAGE: "cosmWasmClient not connected";
        NO_ADDRESS_ERROR_MESSAGE: "address doesn't exist";
        NO_SIGNING_CLIENT_ERROR_MESSAGE: "Signing client is not generated. Please check ts-codegen config";
        NO_QUERY_CLIENT_ERROR_MESSAGE: "Query client is not generated. Please check ts-codegen config";
        NO_MESSAGE_COMPOSER_ERROR_MESSAGE: "Message composer client is not generated. Please check ts-codegen config";
        ContractBase: typeof _56.ContractBase;
    };
    const contractsContext: {
        ContractsProvider: ({ children, contractsConfig, }: {
            children: React.ReactNode;
            contractsConfig: _57.ContractsConfig;
        }) => any;
        useContracts: () => _55.IContractsContext;
    };
}
