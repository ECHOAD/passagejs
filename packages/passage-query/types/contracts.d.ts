/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import * as _0 from "./Pg721.types";
import * as _1 from "./Pg721.client";
import * as _3 from "./Pg721.react-query";
import * as _4 from "./Pg721.provider";
import * as _5 from "./PG721MetadataOnChain.types";
import * as _6 from "./PG721MetadataOnChain.client";
import * as _7 from "./PG721MetadataOnChain.message-composer";
import * as _8 from "./PG721MetadataOnChain.react-query";
import * as _9 from "./PG721MetadataOnChain.provider";
import * as _10 from "./Minter.types";
import * as _11 from "./Minter.client";
import * as _12 from "./Minter.message-composer";
import * as _13 from "./Minter.react-query";
import * as _14 from "./Minter.provider";
import * as _15 from "./Whitelist.types";
import * as _16 from "./Whitelist.client";
import * as _17 from "./Whitelist.message-composer";
import * as _18 from "./Whitelist.react-query";
import * as _19 from "./Whitelist.provider";
import * as _21 from "./Marketplace.client";
import * as _22 from "./Marketplace.message-composer";
import * as _23 from "./Marketplace.react-query";
import * as _24 from "./Marketplace.provider";
import * as _25 from "./MarketplaceV2.types";
import * as _26 from "./MarketplaceV2.client";
import * as _27 from "./MarketplaceV2.message-composer";
import * as _28 from "./MarketplaceV2.react-query";
import * as _29 from "./MarketplaceV2.provider";
import * as _30 from "./contractContextProviders";
import * as _31 from "./contractContextBase";
import * as _32 from "./contracts-context";
export declare namespace contracts {
    const Pg721: {
        Pg721: typeof _4.Pg721;
        usePg721CollectionInfoQuery<TData = _0.CollectionInfoResponse>({ client, options }: _3.Pg721CollectionInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721MinterQuery<TData = _0.MinterResponse>({ client, options }: _3.Pg721MinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllTokensQuery<TData = _0.AllTokensResponse>({ client, args, options }: _3.Pg721AllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721TokensQuery<TData = _0.TokensResponse>({ client, args, options }: _3.Pg721TokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllNftInfoQuery<TData = _0.AllNftInfoResponse>({ client, args, options }: _3.Pg721AllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721NftInfoQuery<TData = _0.NftInfoResponse>({ client, args, options }: _3.Pg721NftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ContractInfoQuery<TData = _0.ContractInfoResponse>({ client, options }: _3.Pg721ContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721NumTokensQuery<TData = _0.NumTokensResponse>({ client, options }: _3.Pg721NumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllOperatorsQuery<TData = _0.AllOperatorsResponse>({ client, args, options }: _3.Pg721AllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ApprovalsQuery<TData = _0.ApprovalsResponse>({ client, args, options }: _3.Pg721ApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ApprovalQuery<TData = _0.ApprovalResponse>({ client, args, options }: _3.Pg721ApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721OwnerOfQuery<TData = _0.OwnerOfResponse>({ client, args, options }: _3.Pg721OwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        Pg721QueryClient: typeof _1.Pg721QueryClient;
    };
    const PG721MetadataOnChain: {
        PG721MetadataOnChain: typeof _9.PG721MetadataOnChain;
        usePG721MetadataOnChainCollectionInfoQuery<TData = _5.CollectionInfoResponse>({ client, options }: _8.PG721MetadataOnChainCollectionInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainMinterQuery<TData = _5.MinterResponse>({ client, options }: _8.PG721MetadataOnChainMinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllTokensQuery<TData = _5.AllTokensResponse>({ client, args, options }: _8.PG721MetadataOnChainAllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainTokensQuery<TData = _5.TokensResponse>({ client, args, options }: _8.PG721MetadataOnChainTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllNftInfoQuery<TData = _5.AllNftInfoResponse>({ client, args, options }: _8.PG721MetadataOnChainAllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainNftInfoQuery<TData = _5.NftInfoResponse>({ client, args, options }: _8.PG721MetadataOnChainNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainContractInfoQuery<TData = _5.ContractInfoResponse>({ client, options }: _8.PG721MetadataOnChainContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainNumTokensQuery<TData = _5.NumTokensResponse>({ client, options }: _8.PG721MetadataOnChainNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllOperatorsQuery<TData = _5.AllOperatorsResponse>({ client, args, options }: _8.PG721MetadataOnChainAllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainApprovalsQuery<TData = _5.ApprovalsResponse>({ client, args, options }: _8.PG721MetadataOnChainApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainApprovalQuery<TData = _5.ApprovalResponse>({ client, args, options }: _8.PG721MetadataOnChainApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainOwnerOfQuery<TData = _5.OwnerOfResponse>({ client, args, options }: _8.PG721MetadataOnChainOwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        PG721MetadataOnChainMsgComposer: typeof _7.PG721MetadataOnChainMsgComposer;
        PG721MetadataOnChainQueryClient: typeof _6.PG721MetadataOnChainQueryClient;
        PG721MetadataOnChainClient: typeof _6.PG721MetadataOnChainClient;
    };
    const Minter: {
        Minter: typeof _14.Minter;
        useMinterMintCountQuery<TData = _10.MintCountResponse>({ client, args, options }: _13.MinterMintCountQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMintPriceQuery<TData = _10.MintPriceResponse>({ client, options }: _13.MinterMintPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterStartTimeQuery<TData = _10.StartTimeResponse>({ client, options }: _13.MinterStartTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMintableNumTokensQuery<TData = _10.MintableNumTokensResponse>({ client, options }: _13.MinterMintableNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterConfigQuery<TData = _10.ConfigResponse>({ client, options }: _13.MinterConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        MinterMsgComposer: typeof _12.MinterMsgComposer;
        MinterQueryClient: typeof _11.MinterQueryClient;
        MinterClient: typeof _11.MinterClient;
    };
    const Whitelist: {
        Whitelist: typeof _19.Whitelist;
        useWhitelistConfigQuery<TData = _15.ConfigResponse>({ client, options }: _18.WhitelistConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasMemberQuery<TData = _15.HasMemberResponse>({ client, args, options }: _18.WhitelistHasMemberQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistMembersQuery<TData = _15.MembersResponse>({ client, args, options }: _18.WhitelistMembersQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistIsActiveQuery<TData = _15.IsActiveResponse>({ client, options }: _18.WhitelistIsActiveQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasEndedQuery<TData = _15.HasEndedResponse>({ client, options }: _18.WhitelistHasEndedQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasStartedQuery<TData = _15.HasStartedResponse>({ client, options }: _18.WhitelistHasStartedQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        WhitelistMsgComposer: typeof _17.WhitelistMsgComposer;
        WhitelistQueryClient: typeof _16.WhitelistQueryClient;
        WhitelistClient: typeof _16.WhitelistClient;
    };
    const Marketplace: {
        Marketplace: typeof _24.Marketplace;
        useMarketplaceListTokensOnSaleQuery<TData = ListTokensOnSaleResponse>({ client, args, options }: _23.MarketplaceListTokensOnSaleQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceListTokensQuery<TData = ListTokensResponse>({ client, args, options }: _23.MarketplaceListTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceRangeTokensQuery<TData = RangeTokensResponse>({ client, args, options }: _23.MarketplaceRangeTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceTokenQuery<TData = TokenResponse>({ client, args, options }: _23.MarketplaceTokenQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceConfigQuery<TData = ConfigResponse>({ client, options }: _23.MarketplaceConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        MarketplaceMsgComposer: typeof _22.MarketplaceMsgComposer;
        MarketplaceQueryClient: typeof _21.MarketplaceQueryClient;
        MarketplaceClient: typeof _21.MarketplaceClient;
    };
    const MarketplaceV2: {
        MarketplaceV2: typeof _29.MarketplaceV2;
        useMarketplaceV2CollectionBidsByExpiryQuery<TData = CollectionBidsByExpiryResponse>({ client, args, options }: _28.MarketplaceV2CollectionBidsByExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2CollectionBidsByPriceQuery<TData = CollectionBidsByPriceResponse>({ client, args, options }: _28.MarketplaceV2CollectionBidsByPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2CollectionBidQuery<TData = _25.CollectionBidResponse>({ client, args, options }: _28.MarketplaceV2CollectionBidQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2BidsByBidderExpiryQuery<TData = BidsByBidderExpiryResponse>({ client, args, options }: _28.MarketplaceV2BidsByBidderExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2BidsByTokenPriceQuery<TData = BidsByTokenPriceResponse>({ client, args, options }: _28.MarketplaceV2BidsByTokenPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2BidsSortedByExpiryQuery<TData = BidsSortedByExpiryResponse>({ client, args, options }: _28.MarketplaceV2BidsSortedByExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2BidQuery<TData = _25.BidResponse>({ client, args, options }: _28.MarketplaceV2BidQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AskCountQuery<TData = _25.AskCountResponse>({ client, options }: _28.MarketplaceV2AskCountQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AsksBySellerExpiryQuery<TData = AsksBySellerExpiryResponse>({ client, args, options }: _28.MarketplaceV2AsksBySellerExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AsksSortedByPriceQuery<TData = AsksSortedByPriceResponse>({ client, args, options }: _28.MarketplaceV2AsksSortedByPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AsksSortedByExpiryQuery<TData = AsksSortedByExpiryResponse>({ client, args, options }: _28.MarketplaceV2AsksSortedByExpiryQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2AskQuery<TData = _25.AskResponse>({ client, args, options }: _28.MarketplaceV2AskQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMarketplaceV2ConfigQuery<TData = _25.ConfigResponse>({ client, options }: _28.MarketplaceV2ConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        MarketplaceV2MsgComposer: typeof _27.MarketplaceV2MsgComposer;
        MarketplaceV2QueryClient: typeof _26.MarketplaceV2QueryClient;
        MarketplaceV2Client: typeof _26.MarketplaceV2Client;
    };
    const contractContextProviders: {
        getProviders: (address?: string, cosmWasmClient?: import("@cosmjs/cosmwasm-stargate").CosmWasmClient, signingCosmWasmClient?: import("@cosmjs/cosmwasm-stargate").SigningCosmWasmClient) => {
            pg721: _4.Pg721;
            pG721MetadataOnChain: _9.PG721MetadataOnChain;
            minter: _14.Minter;
            whitelist: _19.Whitelist;
            marketplace: _24.Marketplace;
            marketplaceV2: _29.MarketplaceV2;
        };
    };
    const contractContextBase: {
        NO_SINGING_ERROR_MESSAGE: "signingCosmWasmClient not connected";
        NO_COSMWASW_CLIENT_ERROR_MESSAGE: "cosmWasmClient not connected";
        NO_ADDRESS_ERROR_MESSAGE: "address doesn't exist";
        NO_SIGNING_CLIENT_ERROR_MESSAGE: "Signing client is not generated. Please check ts-codegen config";
        NO_QUERY_CLIENT_ERROR_MESSAGE: "Query client is not generated. Please check ts-codegen config";
        NO_MESSAGE_COMPOSER_ERROR_MESSAGE: "Message composer client is not generated. Please check ts-codegen config";
        ContractBase: typeof _31.ContractBase;
    };
    const contractsContext: {
        ContractsProvider: ({ children, contractsConfig, }: {
            children: React.ReactNode;
            contractsConfig: _32.ContractsConfig;
        }) => any;
        useContracts: () => _30.IContractsContext;
    };
}
