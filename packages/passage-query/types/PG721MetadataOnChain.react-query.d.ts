/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions } from "@tanstack/react-query";
import { AllNftInfoResponse, OwnerOfResponse, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, CollectionInfoResponse, ContractInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, TokensResponse } from "./PG721MetadataOnChain.types";
import { PG721MetadataOnChainQueryClient } from "./PG721MetadataOnChain.client";
export interface PG721MetadataOnChainReactQuery<TResponse, TData = TResponse> {
    client: PG721MetadataOnChainQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface PG721MetadataOnChainCollectionInfoQuery<TData> extends PG721MetadataOnChainReactQuery<CollectionInfoResponse, TData> {
}
export declare function usePG721MetadataOnChainCollectionInfoQuery<TData = CollectionInfoResponse>({ client, options }: PG721MetadataOnChainCollectionInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainMinterQuery<TData> extends PG721MetadataOnChainReactQuery<MinterResponse, TData> {
}
export declare function usePG721MetadataOnChainMinterQuery<TData = MinterResponse>({ client, options }: PG721MetadataOnChainMinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainAllTokensQuery<TData> extends PG721MetadataOnChainReactQuery<AllTokensResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function usePG721MetadataOnChainAllTokensQuery<TData = AllTokensResponse>({ client, args, options }: PG721MetadataOnChainAllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainTokensQuery<TData> extends PG721MetadataOnChainReactQuery<TokensResponse, TData> {
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function usePG721MetadataOnChainTokensQuery<TData = TokensResponse>({ client, args, options }: PG721MetadataOnChainTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainAllNftInfoQuery<TData> extends PG721MetadataOnChainReactQuery<AllNftInfoResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainAllNftInfoQuery<TData = AllNftInfoResponse>({ client, args, options }: PG721MetadataOnChainAllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainNftInfoQuery<TData> extends PG721MetadataOnChainReactQuery<NftInfoResponse, TData> {
    args: {
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainNftInfoQuery<TData = NftInfoResponse>({ client, args, options }: PG721MetadataOnChainNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainContractInfoQuery<TData> extends PG721MetadataOnChainReactQuery<ContractInfoResponse, TData> {
}
export declare function usePG721MetadataOnChainContractInfoQuery<TData = ContractInfoResponse>({ client, options }: PG721MetadataOnChainContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainNumTokensQuery<TData> extends PG721MetadataOnChainReactQuery<NumTokensResponse, TData> {
}
export declare function usePG721MetadataOnChainNumTokensQuery<TData = NumTokensResponse>({ client, options }: PG721MetadataOnChainNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainAllOperatorsQuery<TData> extends PG721MetadataOnChainReactQuery<AllOperatorsResponse, TData> {
    args: {
        includeExpired?: boolean;
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function usePG721MetadataOnChainAllOperatorsQuery<TData = AllOperatorsResponse>({ client, args, options }: PG721MetadataOnChainAllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainApprovalsQuery<TData> extends PG721MetadataOnChainReactQuery<ApprovalsResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainApprovalsQuery<TData = ApprovalsResponse>({ client, args, options }: PG721MetadataOnChainApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainApprovalQuery<TData> extends PG721MetadataOnChainReactQuery<ApprovalResponse, TData> {
    args: {
        includeExpired?: boolean;
        spender: string;
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainApprovalQuery<TData = ApprovalResponse>({ client, args, options }: PG721MetadataOnChainApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainOwnerOfQuery<TData> extends PG721MetadataOnChainReactQuery<OwnerOfResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainOwnerOfQuery<TData = OwnerOfResponse>({ client, args, options }: PG721MetadataOnChainOwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
