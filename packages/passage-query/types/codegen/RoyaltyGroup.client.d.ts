/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { AdminResponse, Member, Coin, MemberListResponse, MemberResponse, TotalWeightResponse } from "./RoyaltyGroup.types";
import { HooksResponse } from "./RoyaltyGroup.react-query";
export interface RoyaltyGroupReadOnlyInterface {
    contractAddress: string;
    admin: () => Promise<AdminResponse>;
    totalWeight: () => Promise<TotalWeightResponse>;
    listMembers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<MemberListResponse>;
    member: ({ addr, atHeight }: {
        addr: string;
        atHeight?: number;
    }) => Promise<MemberResponse>;
    hooks: () => Promise<HooksResponse>;
}
export declare class RoyaltyGroupQueryClient implements RoyaltyGroupReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    admin: () => Promise<AdminResponse>;
    totalWeight: () => Promise<TotalWeightResponse>;
    listMembers: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<MemberListResponse>;
    member: ({ addr, atHeight }: {
        addr: string;
        atHeight?: number;
    }) => Promise<MemberResponse>;
    hooks: () => Promise<HooksResponse>;
}
export interface RoyaltyGroupInterface extends RoyaltyGroupReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateAdmin: ({ admin }: {
        admin?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateMembers: ({ add, remove }: {
        add: Member[];
        remove: string[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addHook: ({ addr }: {
        addr: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeHook: ({ addr }: {
        addr: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    distribute: ({ funds }: {
        funds: Coin;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class RoyaltyGroupClient extends RoyaltyGroupQueryClient implements RoyaltyGroupInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateAdmin: ({ admin }: {
        admin?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateMembers: ({ add, remove }: {
        add: Member[];
        remove: string[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    addHook: ({ addr }: {
        addr: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    removeHook: ({ addr }: {
        addr: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    distribute: ({ funds }: {
        funds: Coin;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
