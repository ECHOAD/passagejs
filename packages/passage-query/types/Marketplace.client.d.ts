/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Decimal, ConfigResponse, Uint128, TokenResponse, TokensResponse } from "./Marketplace.types";
export interface MarketplaceReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    token: ({ id }: {
        id: string;
    }) => Promise<TokenResponse>;
    rangeTokens: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<any>;
    listTokens: ({ ids }: {
        ids: string[];
    }) => Promise<any>;
    listTokensOnSale: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<TokensResponse>;
}
export declare class MarketplaceQueryClient implements MarketplaceReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    token: ({ id }: {
        id: string;
    }) => Promise<TokenResponse>;
    rangeTokens: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<TokensResponse>;
    listTokens: ({ ids }: {
        ids: string[];
    }) => Promise<any>;
    listTokensOnSale: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<TokensResponse>;
}
export interface MarketplaceInterface extends MarketplaceReadOnlyInterface {
    contractAddress: string;
    sender: string;
    buy: ({ recipient, tokenId }: {
        recipient?: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    listTokens: ({ ids }: {
        ids: string[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<any>;
    delistTokens: ({ tokens }: {
        tokens: string[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updatePrice: ({ price, token }: {
        price: Uint128;
        token: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, allowedNative, collectorAddr, feePercentage, nftAddr }: {
        admin?: string;
        allowedNative?: string;
        collectorAddr?: string;
        feePercentage?: Decimal;
        nftAddr?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class MarketplaceClient extends MarketplaceQueryClient implements MarketplaceInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    buy: ({ recipient, tokenId }: {
        recipient?: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    listTokens: ({ ids }: {
        ids: String[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    delistTokens: ({ tokens }: {
        tokens: string[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updatePrice: ({ price, token }: {
        price: Uint128;
        token: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, allowedNative, collectorAddr, feePercentage, nftAddr }: {
        admin?: string;
        allowedNative?: string;
        collectorAddr?: string;
        feePercentage?: Decimal;
        nftAddr?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
