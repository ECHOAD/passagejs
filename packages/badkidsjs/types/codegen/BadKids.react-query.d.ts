/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { QueryRegisteredQueryResponse, Coin, TransferNftResponse } from "./BadKids.types";
import { BadKidsQueryClient, BadKidsClient } from "./BadKids.client";
export interface BadKidsReactQuery<TResponse, TData = TResponse> {
    client: BadKidsQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface BadKidsGetRegisteredQueryQuery<TData> extends BadKidsReactQuery<QueryRegisteredQueryResponse, TData> {
    args: {
        queryId: number;
    };
}
export declare function useBadKidsGetRegisteredQueryQuery<TData = QueryRegisteredQueryResponse>({ client, args, options }: BadKidsGetRegisteredQueryQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface BadKidsTransferNftQuery<TData> extends BadKidsReactQuery<TransferNftResponse, TData> {
    args: {
        queryId: number;
    };
}
export declare function useBadKidsTransferNftQuery<TData = TransferNftResponse>({ client, args, options }: BadKidsTransferNftQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface BadKidsUnlockNftMutation {
    client: BadKidsClient;
    msg: {
        destination: string;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useBadKidsUnlockNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BadKidsUnlockNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, BadKidsUnlockNftMutation, unknown>;
export interface BadKidsRemoveInterchainQueryMutation {
    client: BadKidsClient;
    msg: {
        queryId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useBadKidsRemoveInterchainQueryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BadKidsRemoveInterchainQueryMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, BadKidsRemoveInterchainQueryMutation, unknown>;
export interface BadKidsRegisterTransferNftQueryMutation {
    client: BadKidsClient;
    msg: {
        connectionId: string;
        contractAddress: string;
        minHeight: number;
        recipient: string;
        sender: string;
        tokenId: string;
        updatePeriod: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useBadKidsRegisterTransferNftQueryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BadKidsRegisterTransferNftQueryMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, BadKidsRegisterTransferNftQueryMutation, unknown>;
export interface BadKidsMintNftMutation {
    client: BadKidsClient;
    msg: {
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useBadKidsMintNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BadKidsMintNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, BadKidsMintNftMutation, unknown>;
