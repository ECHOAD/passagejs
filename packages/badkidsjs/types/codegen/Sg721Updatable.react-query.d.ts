/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Expiration, AllNftInfoResponse, OwnerOfResponse, Empty, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, CollectionInfoResponse, ContractInfoResponse, Binary, UpdateCollectionInfoMsgForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, TokensResponse } from "./Sg721Updatable.types";
import { Sg721UpdatableQueryClient, Sg721UpdatableClient } from "./Sg721Updatable.client";
export interface Sg721UpdatableReactQuery<TResponse, TData = TResponse> {
    client: Sg721UpdatableQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface Sg721UpdatableCollectionInfoQuery<TData> extends Sg721UpdatableReactQuery<CollectionInfoResponse, TData> {
}
export declare function useSg721UpdatableCollectionInfoQuery<TData = CollectionInfoResponse>({ client, options }: Sg721UpdatableCollectionInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableMinterQuery<TData> extends Sg721UpdatableReactQuery<MinterResponse, TData> {
}
export declare function useSg721UpdatableMinterQuery<TData = MinterResponse>({ client, options }: Sg721UpdatableMinterQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableAllTokensQuery<TData> extends Sg721UpdatableReactQuery<AllTokensResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useSg721UpdatableAllTokensQuery<TData = AllTokensResponse>({ client, args, options }: Sg721UpdatableAllTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableTokensQuery<TData> extends Sg721UpdatableReactQuery<TokensResponse, TData> {
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useSg721UpdatableTokensQuery<TData = TokensResponse>({ client, args, options }: Sg721UpdatableTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableAllNftInfoQuery<TData> extends Sg721UpdatableReactQuery<AllNftInfoResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSg721UpdatableAllNftInfoQuery<TData = AllNftInfoResponse>({ client, args, options }: Sg721UpdatableAllNftInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableNftInfoQuery<TData> extends Sg721UpdatableReactQuery<NftInfoResponse, TData> {
    args: {
        tokenId: string;
    };
}
export declare function useSg721UpdatableNftInfoQuery<TData = NftInfoResponse>({ client, args, options }: Sg721UpdatableNftInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableContractInfoQuery<TData> extends Sg721UpdatableReactQuery<ContractInfoResponse, TData> {
}
export declare function useSg721UpdatableContractInfoQuery<TData = ContractInfoResponse>({ client, options }: Sg721UpdatableContractInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableNumTokensQuery<TData> extends Sg721UpdatableReactQuery<NumTokensResponse, TData> {
}
export declare function useSg721UpdatableNumTokensQuery<TData = NumTokensResponse>({ client, options }: Sg721UpdatableNumTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableAllOperatorsQuery<TData> extends Sg721UpdatableReactQuery<AllOperatorsResponse, TData> {
    args: {
        includeExpired?: boolean;
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useSg721UpdatableAllOperatorsQuery<TData = AllOperatorsResponse>({ client, args, options }: Sg721UpdatableAllOperatorsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableApprovalsQuery<TData> extends Sg721UpdatableReactQuery<ApprovalsResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSg721UpdatableApprovalsQuery<TData = ApprovalsResponse>({ client, args, options }: Sg721UpdatableApprovalsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableApprovalQuery<TData> extends Sg721UpdatableReactQuery<ApprovalResponse, TData> {
    args: {
        includeExpired?: boolean;
        spender: string;
        tokenId: string;
    };
}
export declare function useSg721UpdatableApprovalQuery<TData = ApprovalResponse>({ client, args, options }: Sg721UpdatableApprovalQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableOwnerOfQuery<TData> extends Sg721UpdatableReactQuery<OwnerOfResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSg721UpdatableOwnerOfQuery<TData = OwnerOfResponse>({ client, args, options }: Sg721UpdatableOwnerOfQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721UpdatableExtensionMutation {
    client: Sg721UpdatableClient;
    msg: {
        msg: Empty;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableExtensionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableExtensionMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableExtensionMutation, unknown>;
export interface Sg721UpdatableMintMutation {
    client: Sg721UpdatableClient;
    msg: {
        extension?: Empty;
        owner: string;
        tokenId: string;
        tokenUri?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableMintMutation, unknown>;
export interface Sg721UpdatableFreezeCollectionInfoMutation {
    client: Sg721UpdatableClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableFreezeCollectionInfoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableFreezeCollectionInfoMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableFreezeCollectionInfoMutation, unknown>;
export interface Sg721UpdatableUpdateTradingStartTimeMutation {
    client: Sg721UpdatableClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableUpdateTradingStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableUpdateTradingStartTimeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableUpdateTradingStartTimeMutation, unknown>;
export interface Sg721UpdatableUpdateCollectionInfoMutation {
    client: Sg721UpdatableClient;
    msg: {
        collectionInfo: UpdateCollectionInfoMsgForRoyaltyInfoResponse;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableUpdateCollectionInfoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableUpdateCollectionInfoMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableUpdateCollectionInfoMutation, unknown>;
export interface Sg721UpdatableBurnMutation {
    client: Sg721UpdatableClient;
    msg: {
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableBurnMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableBurnMutation, unknown>;
export interface Sg721UpdatableRevokeAllMutation {
    client: Sg721UpdatableClient;
    msg: {
        operator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableRevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableRevokeAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableRevokeAllMutation, unknown>;
export interface Sg721UpdatableApproveAllMutation {
    client: Sg721UpdatableClient;
    msg: {
        expires?: Expiration;
        operator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableApproveAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableApproveAllMutation, unknown>;
export interface Sg721UpdatableRevokeMutation {
    client: Sg721UpdatableClient;
    msg: {
        spender: string;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableRevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableRevokeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableRevokeMutation, unknown>;
export interface Sg721UpdatableApproveMutation {
    client: Sg721UpdatableClient;
    msg: {
        expires?: Expiration;
        spender: string;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableApproveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableApproveMutation, unknown>;
export interface Sg721UpdatableSendNftMutation {
    client: Sg721UpdatableClient;
    msg: {
        contract: string;
        msg: Binary;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableSendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableSendNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableSendNftMutation, unknown>;
export interface Sg721UpdatableTransferNftMutation {
    client: Sg721UpdatableClient;
    msg: {
        recipient: string;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableTransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableTransferNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableTransferNftMutation, unknown>;
export interface Sg721UpdatableEnableUpdatableMutation {
    client: Sg721UpdatableClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableEnableUpdatableMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableEnableUpdatableMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableEnableUpdatableMutation, unknown>;
export interface Sg721UpdatableUpdateTokenMetadataMutation {
    client: Sg721UpdatableClient;
    msg: {
        tokenId: string;
        tokenUri?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableUpdateTokenMetadataMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableUpdateTokenMetadataMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableUpdateTokenMetadataMutation, unknown>;
export interface Sg721UpdatableFreezeTokenMetadataMutation {
    client: Sg721UpdatableClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useSg721UpdatableFreezeTokenMetadataMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Sg721UpdatableFreezeTokenMetadataMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Sg721UpdatableFreezeTokenMetadataMutation, unknown>;
