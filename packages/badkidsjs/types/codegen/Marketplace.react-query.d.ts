/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, SaleType, Coin, AskOffset, CollectionOffset, BidOffset, CollectionBidOffset, AsksResponse, AskCountResponse, HooksResponse, BidResponse, BidsResponse, CollectionBidResponse, CollectionsResponse, ParamsResponse } from "./Marketplace.types";
import { MarketplaceQueryClient, MarketplaceClient } from "./Marketplace.client";
export interface MarketplaceReactQuery<TResponse, TData = TResponse> {
    client: MarketplaceQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface MarketplaceParamsQuery<TData> extends MarketplaceReactQuery<ParamsResponse, TData> {
}
export declare function useMarketplaceParamsQuery<TData = ParamsResponse>({ client, options }: MarketplaceParamsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceSaleHooksQuery<TData> extends MarketplaceReactQuery<HooksResponse, TData> {
}
export declare function useMarketplaceSaleHooksQuery<TData = HooksResponse>({ client, options }: MarketplaceSaleHooksQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceBidHooksQuery<TData> extends MarketplaceReactQuery<HooksResponse, TData> {
}
export declare function useMarketplaceBidHooksQuery<TData = HooksResponse>({ client, options }: MarketplaceBidHooksQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceAskHooksQuery<TData> extends MarketplaceReactQuery<HooksResponse, TData> {
}
export declare function useMarketplaceAskHooksQuery<TData = HooksResponse>({ client, options }: MarketplaceAskHooksQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceReverseCollectionBidsSortedByPriceQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
    args: {
        collection: string;
        limit?: number;
        startBefore?: CollectionBidOffset;
    };
}
export declare function useMarketplaceReverseCollectionBidsSortedByPriceQuery<TData = CollectionBidResponse>({ client, args, options }: MarketplaceReverseCollectionBidsSortedByPriceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceCollectionBidsSortedByPriceQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
    args: {
        collection: string;
        limit?: number;
        startAfter?: CollectionBidOffset;
    };
}
export declare function useMarketplaceCollectionBidsSortedByPriceQuery<TData = CollectionBidResponse>({ client, args, options }: MarketplaceCollectionBidsSortedByPriceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceCollectionBidsByBidderSortedByExpirationQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
    args: {
        bidder: string;
        limit?: number;
        startAfter?: CollectionBidOffset;
    };
}
export declare function useMarketplaceCollectionBidsByBidderSortedByExpirationQuery<TData = CollectionBidResponse>({ client, args, options }: MarketplaceCollectionBidsByBidderSortedByExpirationQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceCollectionBidsByBidderQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
    args: {
        bidder: string;
        limit?: number;
        startAfter?: CollectionOffset;
    };
}
export declare function useMarketplaceCollectionBidsByBidderQuery<TData = CollectionBidResponse>({ client, args, options }: MarketplaceCollectionBidsByBidderQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceCollectionBidQuery<TData> extends MarketplaceReactQuery<CollectionBidResponse, TData> {
    args: {
        bidder: string;
        collection: string;
    };
}
export declare function useMarketplaceCollectionBidQuery<TData = CollectionBidResponse>({ client, args, options }: MarketplaceCollectionBidQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceReverseBidsSortedByPriceQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
    args: {
        collection: string;
        limit?: number;
        startBefore?: BidOffset;
    };
}
export declare function useMarketplaceReverseBidsSortedByPriceQuery<TData = BidsResponse>({ client, args, options }: MarketplaceReverseBidsSortedByPriceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceBidsSortedByPriceQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
    args: {
        collection: string;
        limit?: number;
        startAfter?: BidOffset;
    };
}
export declare function useMarketplaceBidsSortedByPriceQuery<TData = BidsResponse>({ client, args, options }: MarketplaceBidsSortedByPriceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceBidsQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
    args: {
        collection: string;
        limit?: number;
        startAfter?: string;
        tokenId: number;
    };
}
export declare function useMarketplaceBidsQuery<TData = BidsResponse>({ client, args, options }: MarketplaceBidsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceBidsByBidderSortedByExpirationQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
    args: {
        bidder: string;
        limit?: number;
        startAfter?: CollectionOffset;
    };
}
export declare function useMarketplaceBidsByBidderSortedByExpirationQuery<TData = BidsResponse>({ client, args, options }: MarketplaceBidsByBidderSortedByExpirationQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceBidsByBidderQuery<TData> extends MarketplaceReactQuery<BidsResponse, TData> {
    args: {
        bidder: string;
        limit?: number;
        startAfter?: CollectionOffset;
    };
}
export declare function useMarketplaceBidsByBidderQuery<TData = BidsResponse>({ client, args, options }: MarketplaceBidsByBidderQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceBidQuery<TData> extends MarketplaceReactQuery<BidResponse, TData> {
    args: {
        bidder: string;
        collection: string;
        tokenId: number;
    };
}
export declare function useMarketplaceBidQuery<TData = BidResponse>({ client, args, options }: MarketplaceBidQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceAsksBySellerQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
    args: {
        includeInactive?: boolean;
        limit?: number;
        seller: string;
        startAfter?: CollectionOffset;
    };
}
export declare function useMarketplaceAsksBySellerQuery<TData = AsksResponse>({ client, args, options }: MarketplaceAsksBySellerQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceAskCountQuery<TData> extends MarketplaceReactQuery<AskCountResponse, TData> {
    args: {
        collection: string;
    };
}
export declare function useMarketplaceAskCountQuery<TData = AskCountResponse>({ client, args, options }: MarketplaceAskCountQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceReverseAsksSortedByPriceQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
    args: {
        collection: string;
        includeInactive?: boolean;
        limit?: number;
        startBefore?: AskOffset;
    };
}
export declare function useMarketplaceReverseAsksSortedByPriceQuery<TData = AsksResponse>({ client, args, options }: MarketplaceReverseAsksSortedByPriceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceAsksSortedByPriceQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
    args: {
        collection: string;
        includeInactive?: boolean;
        limit?: number;
        startAfter?: AskOffset;
    };
}
export declare function useMarketplaceAsksSortedByPriceQuery<TData = AsksResponse>({ client, args, options }: MarketplaceAsksSortedByPriceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceReverseAsksQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
    args: {
        collection: string;
        includeInactive?: boolean;
        limit?: number;
        startBefore?: number;
    };
}
export declare function useMarketplaceReverseAsksQuery<TData = AsksResponse>({ client, args, options }: MarketplaceReverseAsksQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceAsksQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
    args: {
        collection: string;
        includeInactive?: boolean;
        limit?: number;
        startAfter?: number;
    };
}
export declare function useMarketplaceAsksQuery<TData = AsksResponse>({ client, args, options }: MarketplaceAsksQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceAskQuery<TData> extends MarketplaceReactQuery<AsksResponse, TData> {
    args: {
        collection: string;
        tokenId: number;
    };
}
export declare function useMarketplaceAskQuery<TData = AsksResponse>({ client, args, options }: MarketplaceAskQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceCollectionsQuery<TData> extends MarketplaceReactQuery<CollectionsResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useMarketplaceCollectionsQuery<TData = CollectionsResponse>({ client, args, options }: MarketplaceCollectionsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MarketplaceRemoveStaleCollectionBidMutation {
    client: MarketplaceClient;
    msg: {
        bidder: string;
        collection: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceRemoveStaleCollectionBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveStaleCollectionBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceRemoveStaleCollectionBidMutation, unknown>;
export interface MarketplaceRemoveStaleBidMutation {
    client: MarketplaceClient;
    msg: {
        bidder: string;
        collection: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceRemoveStaleBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveStaleBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceRemoveStaleBidMutation, unknown>;
export interface MarketplaceRemoveStaleAskMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceRemoveStaleAskMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveStaleAskMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceRemoveStaleAskMutation, unknown>;
export interface MarketplaceSyncAskMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceSyncAskMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceSyncAskMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceSyncAskMutation, unknown>;
export interface MarketplaceAcceptCollectionBidMutation {
    client: MarketplaceClient;
    msg: {
        bidder: string;
        collection: string;
        finder?: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceAcceptCollectionBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceAcceptCollectionBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceAcceptCollectionBidMutation, unknown>;
export interface MarketplaceRemoveCollectionBidMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceRemoveCollectionBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveCollectionBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceRemoveCollectionBidMutation, unknown>;
export interface MarketplaceSetCollectionBidMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        expires: Timestamp;
        findersFeeBps?: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceSetCollectionBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceSetCollectionBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceSetCollectionBidMutation, unknown>;
export interface MarketplaceRejectBidMutation {
    client: MarketplaceClient;
    msg: {
        bidder: string;
        collection: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceRejectBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceRejectBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceRejectBidMutation, unknown>;
export interface MarketplaceAcceptBidMutation {
    client: MarketplaceClient;
    msg: {
        bidder: string;
        collection: string;
        finder?: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceAcceptBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceAcceptBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceAcceptBidMutation, unknown>;
export interface MarketplaceRemoveBidMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceRemoveBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceRemoveBidMutation, unknown>;
export interface MarketplaceBuyNowMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        expires: Timestamp;
        finder?: string;
        findersFeeBps?: number;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceBuyNowMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceBuyNowMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceBuyNowMutation, unknown>;
export interface MarketplaceSetBidMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        expires: Timestamp;
        finder?: string;
        findersFeeBps?: number;
        saleType: SaleType;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceSetBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceSetBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceSetBidMutation, unknown>;
export interface MarketplaceUpdateAskPriceMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        price: Coin;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceUpdateAskPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceUpdateAskPriceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceUpdateAskPriceMutation, unknown>;
export interface MarketplaceRemoveAskMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceRemoveAskMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceRemoveAskMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceRemoveAskMutation, unknown>;
export interface MarketplaceSetAskMutation {
    client: MarketplaceClient;
    msg: {
        collection: string;
        expires: Timestamp;
        findersFeeBps?: number;
        fundsRecipient?: string;
        price: Coin;
        reserveFor?: string;
        saleType: SaleType;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMarketplaceSetAskMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceSetAskMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MarketplaceSetAskMutation, unknown>;
