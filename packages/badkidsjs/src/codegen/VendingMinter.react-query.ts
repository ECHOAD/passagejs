/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, Timestamp, Uint64, ConfigResponse, Coin, ExecuteMsg, Decimal, InstantiateMsg, CreateMinterMsgForVendingMinterInitMsgExtension, CollectionParams, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, VendingMinterInitMsgExtension, MinterParamsForParamsExtension, ParamsExtension, MintCountResponse, MintPriceResponse, MintableNumTokensResponse, Addr, MinterConfigForConfigExtension, ConfigExtension, QueryMsg, StartTimeResponse, StatusResponse, Status } from "./VendingMinter.types";
import { VendingMinterQueryClient, VendingMinterClient } from "./VendingMinter.client";
export interface VendingMinterReactQuery<TResponse, TData = TResponse> {
  client: VendingMinterQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VendingMinterStatusQuery<TData> extends VendingMinterReactQuery<StatusResponse, TData> {}
export function useVendingMinterStatusQuery<TData = StatusResponse>({
  client,
  options
}: VendingMinterStatusQuery<TData>) {
  return useQuery<StatusResponse, Error, TData>(["vendingMinterStatus", client.contractAddress], () => client.status(), options);
}
export interface VendingMinterMintCountQuery<TData> extends VendingMinterReactQuery<MintCountResponse, TData> {
  args: {
    address: string;
  };
}
export function useVendingMinterMintCountQuery<TData = MintCountResponse>({
  client,
  args,
  options
}: VendingMinterMintCountQuery<TData>) {
  return useQuery<MintCountResponse, Error, TData>(["vendingMinterMintCount", client.contractAddress, JSON.stringify(args)], () => client.mintCount({
    address: args.address
  }), options);
}
export interface VendingMinterMintPriceQuery<TData> extends VendingMinterReactQuery<MintPriceResponse, TData> {}
export function useVendingMinterMintPriceQuery<TData = MintPriceResponse>({
  client,
  options
}: VendingMinterMintPriceQuery<TData>) {
  return useQuery<MintPriceResponse, Error, TData>(["vendingMinterMintPrice", client.contractAddress], () => client.mintPrice(), options);
}
export interface VendingMinterStartTimeQuery<TData> extends VendingMinterReactQuery<StartTimeResponse, TData> {}
export function useVendingMinterStartTimeQuery<TData = StartTimeResponse>({
  client,
  options
}: VendingMinterStartTimeQuery<TData>) {
  return useQuery<StartTimeResponse, Error, TData>(["vendingMinterStartTime", client.contractAddress], () => client.startTime(), options);
}
export interface VendingMinterMintableNumTokensQuery<TData> extends VendingMinterReactQuery<MintableNumTokensResponse, TData> {}
export function useVendingMinterMintableNumTokensQuery<TData = MintableNumTokensResponse>({
  client,
  options
}: VendingMinterMintableNumTokensQuery<TData>) {
  return useQuery<MintableNumTokensResponse, Error, TData>(["vendingMinterMintableNumTokens", client.contractAddress], () => client.mintableNumTokens(), options);
}
export interface VendingMinterConfigQuery<TData> extends VendingMinterReactQuery<ConfigResponse, TData> {}
export function useVendingMinterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: VendingMinterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["vendingMinterConfig", client.contractAddress], () => client.config(), options);
}
export interface VendingMinterRemoveDiscountPriceMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterRemoveDiscountPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterRemoveDiscountPriceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterRemoveDiscountPriceMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeDiscountPrice(fee, memo, funds), options);
}
export interface VendingMinterUpdateDiscountPriceMutation {
  client: VendingMinterClient;
  msg: {
    price: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterUpdateDiscountPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateDiscountPriceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterUpdateDiscountPriceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateDiscountPrice(msg, fee, memo, funds), options);
}
export interface VendingMinterBurnRemainingMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterBurnRemainingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterBurnRemainingMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterBurnRemainingMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burnRemaining(fee, memo, funds), options);
}
export interface VendingMinterShuffleMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterShuffleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterShuffleMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterShuffleMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.shuffle(fee, memo, funds), options);
}
export interface VendingMinterMintForMutation {
  client: VendingMinterClient;
  msg: {
    recipient: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterMintForMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintForMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterMintForMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintFor(msg, fee, memo, funds), options);
}
export interface VendingMinterMintToMutation {
  client: VendingMinterClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintToMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterMintToMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintTo(msg, fee, memo, funds), options);
}
export interface VendingMinterUpdatePerAddressLimitMutation {
  client: VendingMinterClient;
  msg: {
    perAddressLimit: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterUpdatePerAddressLimitMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdatePerAddressLimitMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterUpdatePerAddressLimitMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updatePerAddressLimit(msg, fee, memo, funds), options);
}
export interface VendingMinterUpdateStartTradingTimeMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterUpdateStartTradingTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateStartTradingTimeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterUpdateStartTradingTimeMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateStartTradingTime(fee, memo, funds), options);
}
export interface VendingMinterUpdateStartTimeMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterUpdateStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateStartTimeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterUpdateStartTimeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateStartTime(msg, fee, memo, funds), options);
}
export interface VendingMinterUpdateMintPriceMutation {
  client: VendingMinterClient;
  msg: {
    price: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterUpdateMintPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateMintPriceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterUpdateMintPriceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateMintPrice(msg, fee, memo, funds), options);
}
export interface VendingMinterPurgeMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterPurgeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterPurgeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterPurgeMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.purge(fee, memo, funds), options);
}
export interface VendingMinterSetWhitelistMutation {
  client: VendingMinterClient;
  msg: {
    whitelist: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterSetWhitelistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterSetWhitelistMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterSetWhitelistMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setWhitelist(msg, fee, memo, funds), options);
}
export interface VendingMinterMintMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterMintMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(fee, memo, funds), options);
}