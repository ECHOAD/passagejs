/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { IQueryClientProvider, ISigningClientProvider, IMessageComposerProvider } from "./contractContextBase";
import { SG721BaseQueryClient } from "./SG721Base.client";
import { SG721Base } from "./SG721Base.provider";
import { SG721MetadataOnchainQueryClient } from "./SG721MetadataOnchain.client";
import { SG721MetadataOnchain } from "./SG721MetadataOnchain.provider";
import { Sg721UpdatableQueryClient } from "./Sg721Updatable.client";
import { Sg721UpdatableClient } from "./Sg721Updatable.client";
import { Sg721UpdatableMessageComposer } from "./Sg721Updatable.message-composer";
import { Sg721Updatable } from "./Sg721Updatable.provider";
import { BaseFactoryClient } from "./BaseFactory.client";
import { BaseFactoryMessageComposer } from "./BaseFactory.message-composer";
import { BaseFactory } from "./BaseFactory.provider";
import { BaseMinterClient } from "./BaseMinter.client";
import { BaseMinterMessageComposer } from "./BaseMinter.message-composer";
import { BaseMinter } from "./BaseMinter.provider";
import { VendingMinterQueryClient } from "./VendingMinter.client";
import { VendingMinterClient } from "./VendingMinter.client";
import { VendingMinterMessageComposer } from "./VendingMinter.message-composer";
import { VendingMinter } from "./VendingMinter.provider";
import { BadKidsQueryClient } from "./BadKids.client";
import { BadKidsClient } from "./BadKids.client";
import { BadKidsMessageComposer } from "./BadKids.message-composer";
import { BadKids } from "./BadKids.provider";
import { MarketplaceQueryClient } from "./Marketplace.client";
import { MarketplaceClient } from "./Marketplace.client";
import { MarketplaceMessageComposer } from "./Marketplace.message-composer";
import { Marketplace } from "./Marketplace.provider";
export interface IContractsContext {
  sG721Base: IQueryClientProvider<SG721BaseQueryClient>;
  sG721MetadataOnchain: IQueryClientProvider<SG721MetadataOnchainQueryClient>;
  sg721Updatable: IQueryClientProvider<Sg721UpdatableQueryClient> & ISigningClientProvider<Sg721UpdatableClient> & IMessageComposerProvider<Sg721UpdatableMessageComposer>;
  baseFactory: ISigningClientProvider<BaseFactoryClient> & IMessageComposerProvider<BaseFactoryMessageComposer>;
  baseMinter: ISigningClientProvider<BaseMinterClient> & IMessageComposerProvider<BaseMinterMessageComposer>;
  vendingMinter: IQueryClientProvider<VendingMinterQueryClient> & ISigningClientProvider<VendingMinterClient> & IMessageComposerProvider<VendingMinterMessageComposer>;
  badKids: IQueryClientProvider<BadKidsQueryClient> & ISigningClientProvider<BadKidsClient> & IMessageComposerProvider<BadKidsMessageComposer>;
  marketplace: IQueryClientProvider<MarketplaceQueryClient> & ISigningClientProvider<MarketplaceClient> & IMessageComposerProvider<MarketplaceMessageComposer>;
}
export const getProviders = (address?: string, cosmWasmClient?: CosmWasmClient, signingCosmWasmClient?: SigningCosmWasmClient) => ({
  sG721Base: new SG721Base({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  sG721MetadataOnchain: new SG721MetadataOnchain({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  sg721Updatable: new Sg721Updatable({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  baseFactory: new BaseFactory({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  baseMinter: new BaseMinter({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  vendingMinter: new VendingMinter({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  badKids: new BadKids({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  }),
  marketplace: new Marketplace({
    address,
    cosmWasmClient,
    signingCosmWasmClient
  })
});