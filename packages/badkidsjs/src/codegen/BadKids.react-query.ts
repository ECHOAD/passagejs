/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Uint128, Binary, QueryType, QueryRegisteredQueryResponse, RegisteredQuery, Coin, KVKey, Height, TransferNftResponse } from "./BadKids.types";
import { BadKidsQueryClient, BadKidsClient } from "./BadKids.client";
export interface BadKidsReactQuery<TResponse, TData = TResponse> {
  client: BadKidsQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface BadKidsGetRegisteredQueryQuery<TData> extends BadKidsReactQuery<QueryRegisteredQueryResponse, TData> {
  args: {
    queryId: number;
  };
}
export function useBadKidsGetRegisteredQueryQuery<TData = QueryRegisteredQueryResponse>({
  client,
  args,
  options
}: BadKidsGetRegisteredQueryQuery<TData>) {
  return useQuery<QueryRegisteredQueryResponse, Error, TData>(["badKidsGetRegisteredQuery", client.contractAddress, JSON.stringify(args)], () => client.getRegisteredQuery({
    queryId: args.queryId
  }), options);
}
export interface BadKidsTransferNftQuery<TData> extends BadKidsReactQuery<TransferNftResponse, TData> {
  args: {
    queryId: number;
  };
}
export function useBadKidsTransferNftQuery<TData = TransferNftResponse>({
  client,
  args,
  options
}: BadKidsTransferNftQuery<TData>) {
  return useQuery<TransferNftResponse, Error, TData>(["badKidsTransferNft", client.contractAddress, JSON.stringify(args)], () => client.transferNft({
    queryId: args.queryId
  }), options);
}
export interface BadKidsUnlockNftMutation {
  client: BadKidsClient;
  msg: {
    destination: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBadKidsUnlockNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BadKidsUnlockNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BadKidsUnlockNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unlockNft(msg, fee, memo, funds), options);
}
export interface BadKidsRemoveInterchainQueryMutation {
  client: BadKidsClient;
  msg: {
    queryId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBadKidsRemoveInterchainQueryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BadKidsRemoveInterchainQueryMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BadKidsRemoveInterchainQueryMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeInterchainQuery(msg, fee, memo, funds), options);
}
export interface BadKidsRegisterTransferNftQueryMutation {
  client: BadKidsClient;
  msg: {
    connectionId: string;
    contractAddress: string;
    minHeight: number;
    recipient: string;
    sender: string;
    tokenId: string;
    updatePeriod: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBadKidsRegisterTransferNftQueryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BadKidsRegisterTransferNftQueryMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BadKidsRegisterTransferNftQueryMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.registerTransferNftQuery(msg, fee, memo, funds), options);
}
export interface BadKidsMintNftMutation {
  client: BadKidsClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useBadKidsMintNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, BadKidsMintNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, BadKidsMintNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintNft(msg, fee, memo, funds), options);
}