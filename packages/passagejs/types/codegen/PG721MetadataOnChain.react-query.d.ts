/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Expiration, AllNftInfoResponse, OwnerOfResponse, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, CollectionInfoResponse, ContractInfoResponse, Binary, Metadata, MinterResponse, NftInfoResponse, NumTokensResponse, TokensResponse } from "./PG721MetadataOnChain.types";
import { PG721MetadataOnChainQueryClient, PG721MetadataOnChainClient } from "./PG721MetadataOnChain.client";
export interface PG721MetadataOnChainReactQuery<TResponse, TData = TResponse> {
    client: PG721MetadataOnChainQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface PG721MetadataOnChainCollectionInfoQuery<TData> extends PG721MetadataOnChainReactQuery<CollectionInfoResponse, TData> {
}
export declare function usePG721MetadataOnChainCollectionInfoQuery<TData = CollectionInfoResponse>({ client, options }: PG721MetadataOnChainCollectionInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainMinterQuery<TData> extends PG721MetadataOnChainReactQuery<MinterResponse, TData> {
}
export declare function usePG721MetadataOnChainMinterQuery<TData = MinterResponse>({ client, options }: PG721MetadataOnChainMinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainAllTokensQuery<TData> extends PG721MetadataOnChainReactQuery<AllTokensResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function usePG721MetadataOnChainAllTokensQuery<TData = AllTokensResponse>({ client, args, options }: PG721MetadataOnChainAllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainTokensQuery<TData> extends PG721MetadataOnChainReactQuery<TokensResponse, TData> {
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function usePG721MetadataOnChainTokensQuery<TData = TokensResponse>({ client, args, options }: PG721MetadataOnChainTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainAllNftInfoQuery<TData> extends PG721MetadataOnChainReactQuery<AllNftInfoResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainAllNftInfoQuery<TData = AllNftInfoResponse>({ client, args, options }: PG721MetadataOnChainAllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainNftInfoQuery<TData> extends PG721MetadataOnChainReactQuery<NftInfoResponse, TData> {
    args: {
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainNftInfoQuery<TData = NftInfoResponse>({ client, args, options }: PG721MetadataOnChainNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainContractInfoQuery<TData> extends PG721MetadataOnChainReactQuery<ContractInfoResponse, TData> {
}
export declare function usePG721MetadataOnChainContractInfoQuery<TData = ContractInfoResponse>({ client, options }: PG721MetadataOnChainContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainNumTokensQuery<TData> extends PG721MetadataOnChainReactQuery<NumTokensResponse, TData> {
}
export declare function usePG721MetadataOnChainNumTokensQuery<TData = NumTokensResponse>({ client, options }: PG721MetadataOnChainNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainAllOperatorsQuery<TData> extends PG721MetadataOnChainReactQuery<AllOperatorsResponse, TData> {
    args: {
        includeExpired?: boolean;
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function usePG721MetadataOnChainAllOperatorsQuery<TData = AllOperatorsResponse>({ client, args, options }: PG721MetadataOnChainAllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainApprovalsQuery<TData> extends PG721MetadataOnChainReactQuery<ApprovalsResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainApprovalsQuery<TData = ApprovalsResponse>({ client, args, options }: PG721MetadataOnChainApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainApprovalQuery<TData> extends PG721MetadataOnChainReactQuery<ApprovalResponse, TData> {
    args: {
        includeExpired?: boolean;
        spender: string;
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainApprovalQuery<TData = ApprovalResponse>({ client, args, options }: PG721MetadataOnChainApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainOwnerOfQuery<TData> extends PG721MetadataOnChainReactQuery<OwnerOfResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function usePG721MetadataOnChainOwnerOfQuery<TData = OwnerOfResponse>({ client, args, options }: PG721MetadataOnChainOwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface PG721MetadataOnChainBurnMutation {
    client: PG721MetadataOnChainClient;
    msg: {
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function usePG721MetadataOnChainBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721MetadataOnChainBurnMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, PG721MetadataOnChainBurnMutation, unknown>;
export interface PG721MetadataOnChainMintMutation {
    client: PG721MetadataOnChainClient;
    msg: {
        extension?: Metadata;
        owner: string;
        tokenId: string;
        tokenUri?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function usePG721MetadataOnChainMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721MetadataOnChainMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, PG721MetadataOnChainMintMutation, unknown>;
export interface PG721MetadataOnChainRevokeAllMutation {
    client: PG721MetadataOnChainClient;
    msg: {
        operator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function usePG721MetadataOnChainRevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721MetadataOnChainRevokeAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, PG721MetadataOnChainRevokeAllMutation, unknown>;
export interface PG721MetadataOnChainApproveAllMutation {
    client: PG721MetadataOnChainClient;
    msg: {
        expires?: Expiration;
        operator: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function usePG721MetadataOnChainApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721MetadataOnChainApproveAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, PG721MetadataOnChainApproveAllMutation, unknown>;
export interface PG721MetadataOnChainRevokeMutation {
    client: PG721MetadataOnChainClient;
    msg: {
        spender: string;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function usePG721MetadataOnChainRevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721MetadataOnChainRevokeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, PG721MetadataOnChainRevokeMutation, unknown>;
export interface PG721MetadataOnChainApproveMutation {
    client: PG721MetadataOnChainClient;
    msg: {
        expires?: Expiration;
        spender: string;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function usePG721MetadataOnChainApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721MetadataOnChainApproveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, PG721MetadataOnChainApproveMutation, unknown>;
export interface PG721MetadataOnChainSendNftMutation {
    client: PG721MetadataOnChainClient;
    msg: {
        contract: string;
        msg: Binary;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function usePG721MetadataOnChainSendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721MetadataOnChainSendNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, PG721MetadataOnChainSendNftMutation, unknown>;
export interface PG721MetadataOnChainTransferNftMutation {
    client: PG721MetadataOnChainClient;
    msg: {
        recipient: string;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function usePG721MetadataOnChainTransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721MetadataOnChainTransferNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, PG721MetadataOnChainTransferNftMutation, unknown>;
