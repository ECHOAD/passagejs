/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ConfigResponse, Coin, TokenMetadata } from "./MinterMetadataOnChain.types";
import { MinterMetadataOnChainQueryClient, MinterMetadataOnChainClient } from "./MinterMetadataOnChain.client";
export interface MinterMetadataOnChainReactQuery<TResponse, TData = TResponse> {
    client: MinterMetadataOnChainQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface MinterMetadataOnChainTokenMintsQuery<TData> extends MinterMetadataOnChainReactQuery<TokenMintsResponse, TData> {
    args: {
        descending?: boolean;
        filterMinted?: boolean;
        limit?: number;
        startAfter?: number;
    };
}
export declare function useMinterMetadataOnChainTokenMintsQuery<TData = TokenMintsResponse>({ client, args, options }: MinterMetadataOnChainTokenMintsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMetadataOnChainTokenMintQuery<TData> extends MinterMetadataOnChainReactQuery<TokenMintResponse, TData> {
    args: {
        tokenId: number;
    };
}
export declare function useMinterMetadataOnChainTokenMintQuery<TData = TokenMintResponse>({ client, args, options }: MinterMetadataOnChainTokenMintQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMetadataOnChainMintCountQuery<TData> extends MinterMetadataOnChainReactQuery<MintCountResponse, TData> {
    args: {
        address: string;
    };
}
export declare function useMinterMetadataOnChainMintCountQuery<TData = MintCountResponse>({ client, args, options }: MinterMetadataOnChainMintCountQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMetadataOnChainMintPriceQuery<TData> extends MinterMetadataOnChainReactQuery<MintPriceResponse, TData> {
}
export declare function useMinterMetadataOnChainMintPriceQuery<TData = MintPriceResponse>({ client, options }: MinterMetadataOnChainMintPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMetadataOnChainStartTimeQuery<TData> extends MinterMetadataOnChainReactQuery<StartTimeResponse, TData> {
}
export declare function useMinterMetadataOnChainStartTimeQuery<TData = StartTimeResponse>({ client, options }: MinterMetadataOnChainStartTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMetadataOnChainNumRemainingQuery<TData> extends MinterMetadataOnChainReactQuery<NumRemainingResponse, TData> {
}
export declare function useMinterMetadataOnChainNumRemainingQuery<TData = NumRemainingResponse>({ client, options }: MinterMetadataOnChainNumRemainingQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMetadataOnChainNumMintedQuery<TData> extends MinterMetadataOnChainReactQuery<NumMintedResponse, TData> {
}
export declare function useMinterMetadataOnChainNumMintedQuery<TData = NumMintedResponse>({ client, options }: MinterMetadataOnChainNumMintedQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMetadataOnChainConfigQuery<TData> extends MinterMetadataOnChainReactQuery<ConfigResponse, TData> {
}
export declare function useMinterMetadataOnChainConfigQuery<TData = ConfigResponse>({ client, options }: MinterMetadataOnChainConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMetadataOnChainWithdrawMutation {
    client: MinterMetadataOnChainClient;
    msg: {
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainWithdrawMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainWithdrawMutation, unknown>;
export interface MinterMetadataOnChainMintForMutation {
    client: MinterMetadataOnChainClient;
    msg: {
        recipient: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainMintForMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainMintForMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainMintForMutation, unknown>;
export interface MinterMetadataOnChainMintToMutation {
    client: MinterMetadataOnChainClient;
    msg: {
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainMintToMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainMintToMutation, unknown>;
export interface MinterMetadataOnChainUpdateUnitPriceMutation {
    client: MinterMetadataOnChainClient;
    msg: {
        unitPrice: Coin;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainUpdateUnitPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainUpdateUnitPriceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainUpdateUnitPriceMutation, unknown>;
export interface MinterMetadataOnChainUpdatePerAddressLimitMutation {
    client: MinterMetadataOnChainClient;
    msg: {
        perAddressLimit: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainUpdatePerAddressLimitMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainUpdatePerAddressLimitMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainUpdatePerAddressLimitMutation, unknown>;
export interface MinterMetadataOnChainUpdateStartTimeMutation {
    client: MinterMetadataOnChainClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainUpdateStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainUpdateStartTimeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainUpdateStartTimeMutation, unknown>;
export interface MinterMetadataOnChainSetWhitelistMutation {
    client: MinterMetadataOnChainClient;
    msg: {
        whitelist: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainSetWhitelistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainSetWhitelistMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainSetWhitelistMutation, unknown>;
export interface MinterMetadataOnChainSetAdminMutation {
    client: MinterMetadataOnChainClient;
    msg: {
        admin: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainSetAdminMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainSetAdminMutation, unknown>;
export interface MinterMetadataOnChainMintMutation {
    client: MinterMetadataOnChainClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainMintMutation, unknown>;
export interface MinterMetadataOnChainUpsertTokenMetadatasMutation {
    client: MinterMetadataOnChainClient;
    msg: {
        tokenMetadatas: TokenMetadata[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMetadataOnChainUpsertTokenMetadatasMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainUpsertTokenMetadatasMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMetadataOnChainUpsertTokenMetadatasMutation, unknown>;
