/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { ConfigResponse, QueryOptionsForTokenTimestampOffset } from "./Minter.types";
import { MinterQueryClient, MinterClient } from "./Minter.client";
export interface MinterReactQuery<TResponse, TData = TResponse> {
    client: MinterQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface MinterVaultTokensByUnstakeTimestampQuery<TData> extends MinterReactQuery<VaultTokensByUnstakeTimestampResponse, TData> {
    args: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    };
}
export declare function useMinterVaultTokensByUnstakeTimestampQuery<TData = VaultTokensByUnstakeTimestampResponse>({ client, args, options }: MinterVaultTokensByUnstakeTimestampQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterVaultTokensByStakeTimestampQuery<TData> extends MinterReactQuery<VaultTokensByStakeTimestampResponse, TData> {
    args: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    };
}
export declare function useMinterVaultTokensByStakeTimestampQuery<TData = VaultTokensByStakeTimestampResponse>({ client, args, options }: MinterVaultTokensByStakeTimestampQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterVaultTokensByOwnerQuery<TData> extends MinterReactQuery<VaultTokensByOwnerResponse, TData> {
    args: {
        owner: string;
        queryOptions: QueryOptionsForTokenTimestampOffset;
    };
}
export declare function useMinterVaultTokensByOwnerQuery<TData = VaultTokensByOwnerResponse>({ client, args, options }: MinterVaultTokensByOwnerQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterVaultTokenQuery<TData> extends MinterReactQuery<VaultTokenResponse, TData> {
    args: {
        tokenId: string;
    };
}
export declare function useMinterVaultTokenQuery<TData = VaultTokenResponse>({ client, args, options }: MinterVaultTokenQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterWithdrawHooksQuery<TData> extends MinterReactQuery<WithdrawHooksResponse, TData> {
}
export declare function useMinterWithdrawHooksQuery<TData = WithdrawHooksResponse>({ client, options }: MinterWithdrawHooksQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterUnstakeHooksQuery<TData> extends MinterReactQuery<UnstakeHooksResponse, TData> {
}
export declare function useMinterUnstakeHooksQuery<TData = UnstakeHooksResponse>({ client, options }: MinterUnstakeHooksQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterStakeHooksQuery<TData> extends MinterReactQuery<StakeHooksResponse, TData> {
}
export declare function useMinterStakeHooksQuery<TData = StakeHooksResponse>({ client, options }: MinterStakeHooksQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterConfigQuery<TData> extends MinterReactQuery<ConfigResponse, TData> {
}
export declare function useMinterConfigQuery<TData = ConfigResponse>({ client, options }: MinterConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterWithdrawMutation {
    client: MinterClient;
    msg: {
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterWithdrawMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterWithdrawMutation, unknown>;
export interface MinterUnstakeMutation {
    client: MinterClient;
    msg: {
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterUnstakeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterUnstakeMutation, unknown>;
export interface MinterStakeMutation {
    client: MinterClient;
    msg: {
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterStakeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterStakeMutation, unknown>;
export interface MinterRemoveWithdrawHookMutation {
    client: MinterClient;
    msg: {
        hook: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterRemoveWithdrawHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterRemoveWithdrawHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterRemoveWithdrawHookMutation, unknown>;
export interface MinterAddWithdrawHookMutation {
    client: MinterClient;
    msg: {
        hook: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterAddWithdrawHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterAddWithdrawHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterAddWithdrawHookMutation, unknown>;
export interface MinterRemoveUnstakeHookMutation {
    client: MinterClient;
    msg: {
        hook: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterRemoveUnstakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterRemoveUnstakeHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterRemoveUnstakeHookMutation, unknown>;
export interface MinterAddUnstakeHookMutation {
    client: MinterClient;
    msg: {
        hook: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterAddUnstakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterAddUnstakeHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterAddUnstakeHookMutation, unknown>;
export interface MinterRemoveStakeHookMutation {
    client: MinterClient;
    msg: {
        hook: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterRemoveStakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterRemoveStakeHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterRemoveStakeHookMutation, unknown>;
export interface MinterAddStakeHookMutation {
    client: MinterClient;
    msg: {
        hook: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterAddStakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterAddStakeHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterAddStakeHookMutation, unknown>;
export interface MinterUpdateConfigMutation {
    client: MinterClient;
    msg: {
        label?: string;
        operators?: string[];
        unstakePeriod?: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterUpdateConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterUpdateConfigMutation, unknown>;
