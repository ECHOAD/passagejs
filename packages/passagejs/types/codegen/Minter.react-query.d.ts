/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ConfigResponse, Coin } from "./Minter.types";
import { MinterQueryClient, MinterClient } from "./Minter.client";
export interface MinterReactQuery<TResponse, TData = TResponse> {
    client: MinterQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface MinterMintCountQuery<TData> extends MinterReactQuery<MintCountResponse, TData> {
    args: {
        address: string;
    };
}
export declare function useMinterMintCountQuery<TData = MintCountResponse>({ client, args, options }: MinterMintCountQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMintPriceQuery<TData> extends MinterReactQuery<MintPriceResponse, TData> {
}
export declare function useMinterMintPriceQuery<TData = MintPriceResponse>({ client, options }: MinterMintPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterStartTimeQuery<TData> extends MinterReactQuery<StartTimeResponse, TData> {
}
export declare function useMinterStartTimeQuery<TData = StartTimeResponse>({ client, options }: MinterStartTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterMintableNumTokensQuery<TData> extends MinterReactQuery<MintableNumTokensResponse, TData> {
}
export declare function useMinterMintableNumTokensQuery<TData = MintableNumTokensResponse>({ client, options }: MinterMintableNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterConfigQuery<TData> extends MinterReactQuery<ConfigResponse, TData> {
}
export declare function useMinterConfigQuery<TData = ConfigResponse>({ client, options }: MinterConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface MinterWithdrawMutation {
    client: MinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterWithdrawMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterWithdrawMutation, unknown>;
export interface MinterMintForMutation {
    client: MinterClient;
    msg: {
        recipient: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMintForMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMintForMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMintForMutation, unknown>;
export interface MinterMintToMutation {
    client: MinterClient;
    msg: {
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMintToMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMintToMutation, unknown>;
export interface MinterUpdatePerAddressLimitMutation {
    client: MinterClient;
    msg: {
        perAddressLimit: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterUpdatePerAddressLimitMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterUpdatePerAddressLimitMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterUpdatePerAddressLimitMutation, unknown>;
export interface MinterUpdateStartTimeMutation {
    client: MinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterUpdateStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterUpdateStartTimeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterUpdateStartTimeMutation, unknown>;
export interface MinterSetWhitelistMutation {
    client: MinterClient;
    msg: {
        whitelist: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterSetWhitelistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterSetWhitelistMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterSetWhitelistMutation, unknown>;
export interface MinterMintMutation {
    client: MinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMinterMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MinterMintMutation, unknown>;
