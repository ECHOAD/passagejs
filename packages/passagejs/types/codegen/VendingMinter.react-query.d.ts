/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ConfigResponse, Coin, MintCountResponse, MintPriceResponse, MintableNumTokensResponse, StartTimeResponse, StatusResponse } from "./VendingMinter.types";
import { VendingMinterQueryClient, VendingMinterClient } from "./VendingMinter.client";
export interface VendingMinterReactQuery<TResponse, TData = TResponse> {
    client: VendingMinterQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface VendingMinterStatusQuery<TData> extends VendingMinterReactQuery<StatusResponse, TData> {
}
export declare function useVendingMinterStatusQuery<TData = StatusResponse>({ client, options }: VendingMinterStatusQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface VendingMinterMintCountQuery<TData> extends VendingMinterReactQuery<MintCountResponse, TData> {
    args: {
        address: string;
    };
}
export declare function useVendingMinterMintCountQuery<TData = MintCountResponse>({ client, args, options }: VendingMinterMintCountQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface VendingMinterMintPriceQuery<TData> extends VendingMinterReactQuery<MintPriceResponse, TData> {
}
export declare function useVendingMinterMintPriceQuery<TData = MintPriceResponse>({ client, options }: VendingMinterMintPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface VendingMinterStartTimeQuery<TData> extends VendingMinterReactQuery<StartTimeResponse, TData> {
}
export declare function useVendingMinterStartTimeQuery<TData = StartTimeResponse>({ client, options }: VendingMinterStartTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface VendingMinterMintableNumTokensQuery<TData> extends VendingMinterReactQuery<MintableNumTokensResponse, TData> {
}
export declare function useVendingMinterMintableNumTokensQuery<TData = MintableNumTokensResponse>({ client, options }: VendingMinterMintableNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface VendingMinterConfigQuery<TData> extends VendingMinterReactQuery<ConfigResponse, TData> {
}
export declare function useVendingMinterConfigQuery<TData = ConfigResponse>({ client, options }: VendingMinterConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface VendingMinterRemoveDiscountPriceMutation {
    client: VendingMinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterRemoveDiscountPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterRemoveDiscountPriceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterRemoveDiscountPriceMutation, unknown>;
export interface VendingMinterUpdateDiscountPriceMutation {
    client: VendingMinterClient;
    msg: {
        price: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterUpdateDiscountPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateDiscountPriceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterUpdateDiscountPriceMutation, unknown>;
export interface VendingMinterBurnRemainingMutation {
    client: VendingMinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterBurnRemainingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterBurnRemainingMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterBurnRemainingMutation, unknown>;
export interface VendingMinterShuffleMutation {
    client: VendingMinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterShuffleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterShuffleMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterShuffleMutation, unknown>;
export interface VendingMinterMintForMutation {
    client: VendingMinterClient;
    msg: {
        recipient: string;
        tokenId: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterMintForMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintForMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterMintForMutation, unknown>;
export interface VendingMinterMintToMutation {
    client: VendingMinterClient;
    msg: {
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintToMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterMintToMutation, unknown>;
export interface VendingMinterUpdatePerAddressLimitMutation {
    client: VendingMinterClient;
    msg: {
        perAddressLimit: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterUpdatePerAddressLimitMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdatePerAddressLimitMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterUpdatePerAddressLimitMutation, unknown>;
export interface VendingMinterUpdateStartTradingTimeMutation {
    client: VendingMinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterUpdateStartTradingTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateStartTradingTimeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterUpdateStartTradingTimeMutation, unknown>;
export interface VendingMinterUpdateStartTimeMutation {
    client: VendingMinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterUpdateStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateStartTimeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterUpdateStartTimeMutation, unknown>;
export interface VendingMinterUpdateMintPriceMutation {
    client: VendingMinterClient;
    msg: {
        price: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterUpdateMintPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateMintPriceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterUpdateMintPriceMutation, unknown>;
export interface VendingMinterPurgeMutation {
    client: VendingMinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterPurgeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterPurgeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterPurgeMutation, unknown>;
export interface VendingMinterSetWhitelistMutation {
    client: VendingMinterClient;
    msg: {
        whitelist: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterSetWhitelistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterSetWhitelistMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterSetWhitelistMutation, unknown>;
export interface VendingMinterMintMutation {
    client: VendingMinterClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVendingMinterMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VendingMinterMintMutation, unknown>;
