/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint128, AuctionResponse, Coin, ConfigResponse, QueryOptionsForTokenTimestampOffset, QueryOptionsForTokenPriceOffset } from "./AuctionEnglish.types";
import { AuctionEnglishQueryClient, AuctionEnglishClient } from "./AuctionEnglish.client";
export interface AuctionEnglishReactQuery<TResponse, TData = TResponse> {
    client: AuctionEnglishQueryClient;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface AuctionEnglishAuctionsByBidderEndTimeQuery<TData> extends AuctionEnglishReactQuery<AuctionsByBidderEndTimeResponse, TData> {
    args: {
        bidder: string;
        queryOptions: QueryOptionsForTokenTimestampOffset;
    };
}
export declare function useAuctionEnglishAuctionsByBidderEndTimeQuery<TData = AuctionsByBidderEndTimeResponse>({ client, args, options }: AuctionEnglishAuctionsByBidderEndTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface AuctionEnglishAuctionsBySellerEndTimeQuery<TData> extends AuctionEnglishReactQuery<AuctionsBySellerEndTimeResponse, TData> {
    args: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
        seller: string;
    };
}
export declare function useAuctionEnglishAuctionsBySellerEndTimeQuery<TData = AuctionsBySellerEndTimeResponse>({ client, args, options }: AuctionEnglishAuctionsBySellerEndTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface AuctionEnglishAuctionsByHighestBidPriceQuery<TData> extends AuctionEnglishReactQuery<AuctionsByHighestBidPriceResponse, TData> {
    args: {
        queryOptions: QueryOptionsForTokenPriceOffset;
    };
}
export declare function useAuctionEnglishAuctionsByHighestBidPriceQuery<TData = AuctionsByHighestBidPriceResponse>({ client, args, options }: AuctionEnglishAuctionsByHighestBidPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface AuctionEnglishAuctionsByEndTimeQuery<TData> extends AuctionEnglishReactQuery<AuctionsByEndTimeResponse, TData> {
    args: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    };
}
export declare function useAuctionEnglishAuctionsByEndTimeQuery<TData = AuctionsByEndTimeResponse>({ client, args, options }: AuctionEnglishAuctionsByEndTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface AuctionEnglishAuctionsByStartTimeQuery<TData> extends AuctionEnglishReactQuery<AuctionsByStartTimeResponse, TData> {
    args: {
        queryOptions: QueryOptionsForTokenTimestampOffset;
    };
}
export declare function useAuctionEnglishAuctionsByStartTimeQuery<TData = AuctionsByStartTimeResponse>({ client, args, options }: AuctionEnglishAuctionsByStartTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface AuctionEnglishAuctionQuery<TData> extends AuctionEnglishReactQuery<AuctionResponse, TData> {
    args: {
        tokenId: string;
    };
}
export declare function useAuctionEnglishAuctionQuery<TData = AuctionResponse>({ client, args, options }: AuctionEnglishAuctionQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface AuctionEnglishConfigQuery<TData> extends AuctionEnglishReactQuery<ConfigResponse, TData> {
}
export declare function useAuctionEnglishConfigQuery<TData = ConfigResponse>({ client, options }: AuctionEnglishConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
export interface AuctionEnglishVoidAuctionMutation {
    client: AuctionEnglishClient;
    msg: {
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAuctionEnglishVoidAuctionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AuctionEnglishVoidAuctionMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AuctionEnglishVoidAuctionMutation, unknown>;
export interface AuctionEnglishFinalizeAuctionMutation {
    client: AuctionEnglishClient;
    msg: {
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAuctionEnglishFinalizeAuctionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AuctionEnglishFinalizeAuctionMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AuctionEnglishFinalizeAuctionMutation, unknown>;
export interface AuctionEnglishCloseAuctionMutation {
    client: AuctionEnglishClient;
    msg: {
        acceptHighestBid: boolean;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAuctionEnglishCloseAuctionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AuctionEnglishCloseAuctionMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AuctionEnglishCloseAuctionMutation, unknown>;
export interface AuctionEnglishSetAuctionBidMutation {
    client: AuctionEnglishClient;
    msg: {
        price: Coin;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAuctionEnglishSetAuctionBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AuctionEnglishSetAuctionBidMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AuctionEnglishSetAuctionBidMutation, unknown>;
export interface AuctionEnglishSetAuctionMutation {
    client: AuctionEnglishClient;
    msg: {
        endTime: Timestamp;
        fundsRecipient?: string;
        reservePrice?: Coin;
        startTime: Timestamp;
        startingPrice: Coin;
        tokenId: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAuctionEnglishSetAuctionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AuctionEnglishSetAuctionMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AuctionEnglishSetAuctionMutation, unknown>;
export interface AuctionEnglishUpdateConfigMutation {
    client: AuctionEnglishClient;
    msg: {
        bufferDuration?: number;
        closedDuration?: number;
        collectorAddress?: string;
        maxDuration?: number;
        minBidIncrement?: Uint128;
        minDuration?: number;
        minPrice?: Uint128;
        operators?: string[];
        tradingFeeBps?: number;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAuctionEnglishUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AuctionEnglishUpdateConfigMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AuctionEnglishUpdateConfigMutation, unknown>;
