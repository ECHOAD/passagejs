/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import * as _0 from "./Pg721.types";
import * as _1 from "./Pg721.client";
import * as _2 from "./Pg721.message-composer";
import * as _3 from "./Pg721.react-query";
import * as _4 from "./Pg721.provider";
import * as _5 from "./PG721Legacy.types";
import * as _6 from "./PG721Legacy.client";
import * as _7 from "./PG721Legacy.message-composer";
import * as _8 from "./PG721Legacy.react-query";
import * as _9 from "./PG721Legacy.provider";
import * as _10 from "./PG721MetadataOnChain.types";
import * as _11 from "./PG721MetadataOnChain.client";
import * as _12 from "./PG721MetadataOnChain.message-composer";
import * as _13 from "./PG721MetadataOnChain.react-query";
import * as _14 from "./PG721MetadataOnChain.provider";
import * as _15 from "./Minter.types";
import * as _16 from "./Minter.client";
import * as _17 from "./Minter.message-composer";
import * as _18 from "./Minter.react-query";
import * as _19 from "./Minter.provider";
import * as _20 from "./RoyaltyGroup.types";
import * as _21 from "./RoyaltyGroup.client";
import * as _22 from "./RoyaltyGroup.message-composer";
import * as _23 from "./RoyaltyGroup.react-query";
import * as _24 from "./RoyaltyGroup.provider";
import * as _25 from "./Whitelist.types";
import * as _26 from "./Whitelist.client";
import * as _27 from "./Whitelist.message-composer";
import * as _28 from "./Whitelist.react-query";
import * as _29 from "./Whitelist.provider";
import * as _30 from "./contractContextProviders";
import * as _31 from "./contractContextBase";
import * as _32 from "./contracts-context";
export declare namespace contracts {
    const Pg721: {
        Pg721: typeof _4.Pg721;
        usePg721CollectionInfoQuery<TData = _0.CollectionInfoResponse>({ client, options }: _3.Pg721CollectionInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721MinterQuery<TData = _0.MinterResponse>({ client, options }: _3.Pg721MinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllTokensQuery<TData = _0.AllTokensResponse>({ client, args, options }: _3.Pg721AllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721TokensQuery<TData = _0.TokensResponse>({ client, args, options }: _3.Pg721TokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllNftInfoQuery<TData = _0.AllNftInfoResponse>({ client, args, options }: _3.Pg721AllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721NftInfoQuery<TData = _0.NftInfoResponse>({ client, args, options }: _3.Pg721NftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ContractInfoQuery<TData = _0.ContractInfoResponse>({ client, options }: _3.Pg721ContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721NumTokensQuery<TData = _0.NumTokensResponse>({ client, options }: _3.Pg721NumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721AllOperatorsQuery<TData = _0.AllOperatorsResponse>({ client, args, options }: _3.Pg721AllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ApprovalsQuery<TData = _0.ApprovalsResponse>({ client, args, options }: _3.Pg721ApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721ApprovalQuery<TData = _0.ApprovalResponse>({ client, args, options }: _3.Pg721ApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721OwnerOfQuery<TData = _0.OwnerOfResponse>({ client, args, options }: _3.Pg721OwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePg721BurnMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721BurnMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721BurnMutation, unknown>;
        usePg721MintMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721MintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721MintMutation, unknown>;
        usePg721RevokeAllMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721RevokeAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721RevokeAllMutation, unknown>;
        usePg721ApproveAllMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721ApproveAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721ApproveAllMutation, unknown>;
        usePg721RevokeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721RevokeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721RevokeMutation, unknown>;
        usePg721ApproveMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721ApproveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721ApproveMutation, unknown>;
        usePg721SendNftMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721SendNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721SendNftMutation, unknown>;
        usePg721TransferNftMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721TransferNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _3.Pg721TransferNftMutation, unknown>;
        Pg721MsgComposer: typeof _2.Pg721MsgComposer;
        Pg721QueryClient: typeof _1.Pg721QueryClient;
        Pg721Client: typeof _1.Pg721Client;
    };
    const PG721Legacy: {
        PG721Legacy: typeof _9.PG721Legacy;
        usePG721LegacyMinterQuery<TData = _5.MinterResponse>({ client, options }: _8.PG721LegacyMinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyAllTokensQuery<TData = AllTokensResponse>({ client, args, options }: _8.PG721LegacyAllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyTokensQuery<TData = _5.TokensResponse>({ client, args, options }: _8.PG721LegacyTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyAllNftInfoQuery<TData = _5.AllNftInfoResponse>({ client, args, options }: _8.PG721LegacyAllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyNftInfoQuery<TData = _5.NftInfoResponse>({ client, args, options }: _8.PG721LegacyNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyContractInfoQuery<TData = _5.ContractInfoResponse>({ client, options }: _8.PG721LegacyContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyNumTokensQuery<TData = _5.NumTokensResponse>({ client, options }: _8.PG721LegacyNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyAllOperatorsQuery<TData = AllOperatorsResponse>({ client, args, options }: _8.PG721LegacyAllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyApprovalsQuery<TData = _5.ApprovalsResponse>({ client, args, options }: _8.PG721LegacyApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyApprovalQuery<TData = _5.ApprovalResponse>({ client, args, options }: _8.PG721LegacyApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyOwnerOfQuery<TData = _5.OwnerOfResponse>({ client, args, options }: _8.PG721LegacyOwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721LegacyBurnMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyBurnMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyBurnMutation, unknown>;
        usePG721LegacyMintMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyMintMutation, unknown>;
        usePG721LegacyRevokeAllMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyRevokeAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyRevokeAllMutation, unknown>;
        usePG721LegacyApproveAllMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyApproveAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyApproveAllMutation, unknown>;
        usePG721LegacyRevokeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyRevokeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyRevokeMutation, unknown>;
        usePG721LegacyApproveMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyApproveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyApproveMutation, unknown>;
        usePG721LegacySendNftMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacySendNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacySendNftMutation, unknown>;
        usePG721LegacyTransferNftMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyTransferNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _8.PG721LegacyTransferNftMutation, unknown>;
        PG721LegacyMsgComposer: typeof _7.PG721LegacyMsgComposer;
        PG721LegacyQueryClient: typeof _6.PG721LegacyQueryClient;
        PG721LegacyClient: typeof _6.PG721LegacyClient;
    };
    const PG721MetadataOnChain: {
        PG721MetadataOnChain: typeof _14.PG721MetadataOnChain;
        usePG721MetadataOnChainCollectionInfoQuery<TData = _10.CollectionInfoResponse>({ client, options }: _13.PG721MetadataOnChainCollectionInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainMinterQuery<TData = _10.MinterResponse>({ client, options }: _13.PG721MetadataOnChainMinterQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllTokensQuery<TData = _10.AllTokensResponse>({ client, args, options }: _13.PG721MetadataOnChainAllTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainTokensQuery<TData = _10.TokensResponse>({ client, args, options }: _13.PG721MetadataOnChainTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllNftInfoQuery<TData = _10.AllNftInfoResponse>({ client, args, options }: _13.PG721MetadataOnChainAllNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainNftInfoQuery<TData = _10.NftInfoResponse>({ client, args, options }: _13.PG721MetadataOnChainNftInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainContractInfoQuery<TData = _10.ContractInfoResponse>({ client, options }: _13.PG721MetadataOnChainContractInfoQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainNumTokensQuery<TData = _10.NumTokensResponse>({ client, options }: _13.PG721MetadataOnChainNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainAllOperatorsQuery<TData = _10.AllOperatorsResponse>({ client, args, options }: _13.PG721MetadataOnChainAllOperatorsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainApprovalsQuery<TData = _10.ApprovalsResponse>({ client, args, options }: _13.PG721MetadataOnChainApprovalsQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainApprovalQuery<TData = _10.ApprovalResponse>({ client, args, options }: _13.PG721MetadataOnChainApprovalQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainOwnerOfQuery<TData = _10.OwnerOfResponse>({ client, args, options }: _13.PG721MetadataOnChainOwnerOfQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        usePG721MetadataOnChainBurnMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainBurnMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainBurnMutation, unknown>;
        usePG721MetadataOnChainMintMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainMintMutation, unknown>;
        usePG721MetadataOnChainRevokeAllMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainRevokeAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainRevokeAllMutation, unknown>;
        usePG721MetadataOnChainApproveAllMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainApproveAllMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainApproveAllMutation, unknown>;
        usePG721MetadataOnChainRevokeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainRevokeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainRevokeMutation, unknown>;
        usePG721MetadataOnChainApproveMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainApproveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainApproveMutation, unknown>;
        usePG721MetadataOnChainSendNftMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainSendNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainSendNftMutation, unknown>;
        usePG721MetadataOnChainTransferNftMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainTransferNftMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _13.PG721MetadataOnChainTransferNftMutation, unknown>;
        PG721MetadataOnChainMsgComposer: typeof _12.PG721MetadataOnChainMsgComposer;
        PG721MetadataOnChainQueryClient: typeof _11.PG721MetadataOnChainQueryClient;
        PG721MetadataOnChainClient: typeof _11.PG721MetadataOnChainClient;
    };
    const Minter: {
        Minter: typeof _19.Minter;
        useMinterMintCountQuery<TData = MintCountResponse>({ client, args, options }: _18.MinterMintCountQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMintPriceQuery<TData = MintPriceResponse>({ client, options }: _18.MinterMintPriceQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterStartTimeQuery<TData = StartTimeResponse>({ client, options }: _18.MinterStartTimeQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterMintableNumTokensQuery<TData = MintableNumTokensResponse>({ client, options }: _18.MinterMintableNumTokensQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterConfigQuery<TData = _15.ConfigResponse>({ client, options }: _18.MinterConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useMinterWithdrawMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterWithdrawMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterWithdrawMutation, unknown>;
        useMinterMintForMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterMintForMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterMintForMutation, unknown>;
        useMinterMintToMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterMintToMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterMintToMutation, unknown>;
        useMinterUpdatePerAddressLimitMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterUpdatePerAddressLimitMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterUpdatePerAddressLimitMutation, unknown>;
        useMinterUpdateStartTimeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterUpdateStartTimeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterUpdateStartTimeMutation, unknown>;
        useMinterSetWhitelistMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterSetWhitelistMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterSetWhitelistMutation, unknown>;
        useMinterMintMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterMintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _18.MinterMintMutation, unknown>;
        MinterMsgComposer: typeof _17.MinterMsgComposer;
        MinterQueryClient: typeof _16.MinterQueryClient;
        MinterClient: typeof _16.MinterClient;
    };
    const RoyaltyGroup: {
        RoyaltyGroup: typeof _24.RoyaltyGroup;
        useRoyaltyGroupHooksQuery<TData = HooksResponse>({ client, options }: _23.RoyaltyGroupHooksQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupMemberQuery<TData = _20.MemberResponse>({ client, args, options }: _23.RoyaltyGroupMemberQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupListMembersQuery<TData = ListMembersResponse>({ client, args, options }: _23.RoyaltyGroupListMembersQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupTotalWeightQuery<TData = _20.TotalWeightResponse>({ client, options }: _23.RoyaltyGroupTotalWeightQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupAdminQuery<TData = _20.AdminResponse>({ client, options }: _23.RoyaltyGroupAdminQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useRoyaltyGroupDistributeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupDistributeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupDistributeMutation, unknown>;
        useRoyaltyGroupRemoveHookMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupRemoveHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupRemoveHookMutation, unknown>;
        useRoyaltyGroupAddHookMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupAddHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupAddHookMutation, unknown>;
        useRoyaltyGroupUpdateMembersMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupUpdateMembersMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupUpdateMembersMutation, unknown>;
        useRoyaltyGroupUpdateAdminMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupUpdateAdminMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _23.RoyaltyGroupUpdateAdminMutation, unknown>;
        RoyaltyGroupMsgComposer: typeof _22.RoyaltyGroupMsgComposer;
        RoyaltyGroupQueryClient: typeof _21.RoyaltyGroupQueryClient;
        RoyaltyGroupClient: typeof _21.RoyaltyGroupClient;
    };
    const Whitelist: {
        Whitelist: typeof _29.Whitelist;
        useWhitelistConfigQuery<TData = _25.ConfigResponse>({ client, options }: _28.WhitelistConfigQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasMemberQuery<TData = HasMemberResponse>({ client, args, options }: _28.WhitelistHasMemberQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistMembersQuery<TData = _25.MembersResponse>({ client, args, options }: _28.WhitelistMembersQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistIsActiveQuery<TData = IsActiveResponse>({ client, options }: _28.WhitelistIsActiveQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasEndedQuery<TData = HasEndedResponse>({ client, options }: _28.WhitelistHasEndedQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistHasStartedQuery<TData = HasStartedResponse>({ client, options }: _28.WhitelistHasStartedQuery<TData>): import("@tanstack/react-query").DefinedUseQueryResult<TData, Error>;
        useWhitelistIncreaseMemberLimitMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistIncreaseMemberLimitMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistIncreaseMemberLimitMutation, unknown>;
        useWhitelistUpdatePerAddressLimitMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistUpdatePerAddressLimitMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistUpdatePerAddressLimitMutation, unknown>;
        useWhitelistRemoveMembersMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistRemoveMembersMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistRemoveMembersMutation, unknown>;
        useWhitelistAddMembersMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistAddMembersMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistAddMembersMutation, unknown>;
        useWhitelistUpdateEndTimeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistUpdateEndTimeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistUpdateEndTimeMutation, unknown>;
        useWhitelistUpdateStartTimeMutation(options?: Omit<import("@tanstack/react-query").UseMutationOptions<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistUpdateStartTimeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<import("@cosmjs/cosmwasm-stargate").ExecuteResult, Error, _28.WhitelistUpdateStartTimeMutation, unknown>;
        WhitelistMsgComposer: typeof _27.WhitelistMsgComposer;
        WhitelistQueryClient: typeof _26.WhitelistQueryClient;
        WhitelistClient: typeof _26.WhitelistClient;
    };
    const contractContextProviders: {
        getProviders: (address?: string, cosmWasmClient?: import("@cosmjs/cosmwasm-stargate").CosmWasmClient, signingCosmWasmClient?: import("@cosmjs/cosmwasm-stargate").SigningCosmWasmClient) => {
            pg721: _4.Pg721;
            pG721Legacy: _9.PG721Legacy;
            pG721MetadataOnChain: _14.PG721MetadataOnChain;
            minter: _19.Minter;
            royaltyGroup: _24.RoyaltyGroup;
            whitelist: _29.Whitelist;
        };
    };
    const contractContextBase: {
        NO_SINGING_ERROR_MESSAGE: "signingCosmWasmClient not connected";
        NO_COSMWASW_CLIENT_ERROR_MESSAGE: "cosmWasmClient not connected";
        NO_ADDRESS_ERROR_MESSAGE: "address doesn't exist";
        NO_SIGNING_CLIENT_ERROR_MESSAGE: "Signing client is not generated. Please check ts-codegen config";
        NO_QUERY_CLIENT_ERROR_MESSAGE: "Query client is not generated. Please check ts-codegen config";
        NO_MESSAGE_COMPOSER_ERROR_MESSAGE: "Message composer client is not generated. Please check ts-codegen config";
        ContractBase: typeof _31.ContractBase;
    };
    const contractsContext: {
        ContractsProvider: ({ children, contractsConfig, }: {
            children: React.ReactNode;
            contractsConfig: _32.ContractsConfig;
        }) => any;
        useContracts: () => _30.IContractsContext;
    };
}
