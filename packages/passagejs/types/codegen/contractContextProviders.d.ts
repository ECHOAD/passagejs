/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { IQueryClientProvider, ISigningClientProvider, IMessageComposerProvider } from "./contractContextBase";
import { Pg721QueryClient } from "./Pg721.client";
import { Pg721Client } from "./Pg721.client";
import { Pg721MsgComposer } from "./Pg721.message-composer";
import { Pg721 } from "./Pg721.provider";
import { PG721LegacyQueryClient } from "./PG721Legacy.client";
import { PG721LegacyClient } from "./PG721Legacy.client";
import { PG721LegacyMsgComposer } from "./PG721Legacy.message-composer";
import { PG721Legacy } from "./PG721Legacy.provider";
import { PG721MetadataOnChainQueryClient } from "./PG721MetadataOnChain.client";
import { PG721MetadataOnChainClient } from "./PG721MetadataOnChain.client";
import { PG721MetadataOnChainMsgComposer } from "./PG721MetadataOnChain.message-composer";
import { PG721MetadataOnChain } from "./PG721MetadataOnChain.provider";
import { MinterQueryClient } from "./Minter.client";
import { MinterClient } from "./Minter.client";
import { MinterMsgComposer } from "./Minter.message-composer";
import { Minter } from "./Minter.provider";
import { RoyaltyGroupQueryClient } from "./RoyaltyGroup.client";
import { RoyaltyGroupClient } from "./RoyaltyGroup.client";
import { RoyaltyGroupMsgComposer } from "./RoyaltyGroup.message-composer";
import { RoyaltyGroup } from "./RoyaltyGroup.provider";
import { WhitelistQueryClient } from "./Whitelist.client";
import { WhitelistClient } from "./Whitelist.client";
import { WhitelistMsgComposer } from "./Whitelist.message-composer";
import { Whitelist } from "./Whitelist.provider";
export interface IContractsContext {
    pg721: IQueryClientProvider<Pg721QueryClient> & ISigningClientProvider<Pg721Client> & IMessageComposerProvider<Pg721MsgComposer>;
    pG721Legacy: IQueryClientProvider<PG721LegacyQueryClient> & ISigningClientProvider<PG721LegacyClient> & IMessageComposerProvider<PG721LegacyMsgComposer>;
    pG721MetadataOnChain: IQueryClientProvider<PG721MetadataOnChainQueryClient> & ISigningClientProvider<PG721MetadataOnChainClient> & IMessageComposerProvider<PG721MetadataOnChainMsgComposer>;
    minter: IQueryClientProvider<MinterQueryClient> & ISigningClientProvider<MinterClient> & IMessageComposerProvider<MinterMsgComposer>;
    royaltyGroup: IQueryClientProvider<RoyaltyGroupQueryClient> & ISigningClientProvider<RoyaltyGroupClient> & IMessageComposerProvider<RoyaltyGroupMsgComposer>;
    whitelist: IQueryClientProvider<WhitelistQueryClient> & ISigningClientProvider<WhitelistClient> & IMessageComposerProvider<WhitelistMsgComposer>;
}
export declare const getProviders: (address?: string, cosmWasmClient?: CosmWasmClient, signingCosmWasmClient?: SigningCosmWasmClient) => {
    pg721: Pg721;
    pG721Legacy: PG721Legacy;
    pG721MetadataOnChain: PG721MetadataOnChain;
    minter: Minter;
    royaltyGroup: RoyaltyGroup;
    whitelist: Whitelist;
};
