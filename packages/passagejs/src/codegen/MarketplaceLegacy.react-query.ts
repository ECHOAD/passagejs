/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, Decimal, Config, ExecuteMsg, Uint128, Token, InstantiateMsg, QueryMsg } from "./MarketplaceLegacy.types";
import { MarketplaceLegacyQueryClient, MarketplaceLegacyClient } from "./MarketplaceLegacy.client";
export interface MarketplaceLegacyReactQuery<TResponse, TData = TResponse> {
  client: MarketplaceLegacyQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MarketplaceLegacyListTokensOnSaleQuery<TData> extends MarketplaceLegacyReactQuery<ListTokensOnSaleResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useMarketplaceLegacyListTokensOnSaleQuery<TData = ListTokensOnSaleResponse>({
  client,
  args,
  options
}: MarketplaceLegacyListTokensOnSaleQuery<TData>) {
  return useQuery<ListTokensOnSaleResponse, Error, TData>(["marketplaceLegacyListTokensOnSale", client.contractAddress, JSON.stringify(args)], () => client.listTokensOnSale({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceLegacyListTokensQuery<TData> extends MarketplaceLegacyReactQuery<ListTokensResponse, TData> {
  args: {
    ids: string[];
  };
}
export function useMarketplaceLegacyListTokensQuery<TData = ListTokensResponse>({
  client,
  args,
  options
}: MarketplaceLegacyListTokensQuery<TData>) {
  return useQuery<ListTokensResponse, Error, TData>(["marketplaceLegacyListTokens", client.contractAddress, JSON.stringify(args)], () => client.listTokens({
    ids: args.ids
  }), options);
}
export interface MarketplaceLegacyRangeTokensQuery<TData> extends MarketplaceLegacyReactQuery<RangeTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useMarketplaceLegacyRangeTokensQuery<TData = RangeTokensResponse>({
  client,
  args,
  options
}: MarketplaceLegacyRangeTokensQuery<TData>) {
  return useQuery<RangeTokensResponse, Error, TData>(["marketplaceLegacyRangeTokens", client.contractAddress, JSON.stringify(args)], () => client.rangeTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MarketplaceLegacyTokenQuery<TData> extends MarketplaceLegacyReactQuery<TokenResponse, TData> {
  args: {
    id: string;
  };
}
export function useMarketplaceLegacyTokenQuery<TData = TokenResponse>({
  client,
  args,
  options
}: MarketplaceLegacyTokenQuery<TData>) {
  return useQuery<TokenResponse, Error, TData>(["marketplaceLegacyToken", client.contractAddress, JSON.stringify(args)], () => client.token({
    id: args.id
  }), options);
}
export interface MarketplaceLegacyConfigQuery<TData> extends MarketplaceLegacyReactQuery<ConfigResponse, TData> {}
export function useMarketplaceLegacyConfigQuery<TData = ConfigResponse>({
  client,
  options
}: MarketplaceLegacyConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["marketplaceLegacyConfig", client.contractAddress], () => client.config(), options);
}
export interface MarketplaceLegacyUpdateConfigMutation {
  client: MarketplaceLegacyClient;
  msg: {
    admin?: string;
    allowedNative?: string;
    collectorAddr?: string;
    feePercentage?: Decimal;
    nftAddr?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceLegacyUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceLegacyUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarketplaceLegacyUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface MarketplaceLegacyUpdatePriceMutation {
  client: MarketplaceLegacyClient;
  msg: {
    price: Uint128;
    token: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceLegacyUpdatePriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceLegacyUpdatePriceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarketplaceLegacyUpdatePriceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updatePrice(msg, fee, memo, funds), options);
}
export interface MarketplaceLegacyDelistTokensMutation {
  client: MarketplaceLegacyClient;
  msg: {
    tokens: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceLegacyDelistTokensMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceLegacyDelistTokensMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarketplaceLegacyDelistTokensMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.delistTokens(msg, fee, memo, funds), options);
}
export interface MarketplaceLegacyListTokensMutation {
  client: MarketplaceLegacyClient;
  msg: {
    tokens: Token[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceLegacyListTokensMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceLegacyListTokensMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarketplaceLegacyListTokensMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.listTokens(msg, fee, memo, funds), options);
}
export interface MarketplaceLegacyBuyMutation {
  client: MarketplaceLegacyClient;
  msg: {
    recipient?: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarketplaceLegacyBuyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarketplaceLegacyBuyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarketplaceLegacyBuyMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.buy(msg, fee, memo, funds), options);
}