/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, Uint128, ConfigResponse, Coin, Addr, Config, ExecuteMsg, TokenMetadata, Metadata, Trait, Decimal, InstantiateMsg, InstantiateMsg1, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, QueryMsg } from "./MinterMetadataOnChain.types";
import { MinterMetadataOnChainQueryClient, MinterMetadataOnChainClient } from "./MinterMetadataOnChain.client";
export interface MinterMetadataOnChainReactQuery<TResponse, TData = TResponse> {
  client: MinterMetadataOnChainQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MinterMetadataOnChainTokenMintsQuery<TData> extends MinterMetadataOnChainReactQuery<TokenMintsResponse, TData> {
  args: {
    descending?: boolean;
    filterMinted?: boolean;
    limit?: number;
    startAfter?: number;
  };
}
export function useMinterMetadataOnChainTokenMintsQuery<TData = TokenMintsResponse>({
  client,
  args,
  options
}: MinterMetadataOnChainTokenMintsQuery<TData>) {
  return useQuery<TokenMintsResponse, Error, TData>(["minterMetadataOnChainTokenMints", client.contractAddress, JSON.stringify(args)], () => client.tokenMints({
    descending: args.descending,
    filterMinted: args.filterMinted,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface MinterMetadataOnChainTokenMintQuery<TData> extends MinterMetadataOnChainReactQuery<TokenMintResponse, TData> {
  args: {
    tokenId: number;
  };
}
export function useMinterMetadataOnChainTokenMintQuery<TData = TokenMintResponse>({
  client,
  args,
  options
}: MinterMetadataOnChainTokenMintQuery<TData>) {
  return useQuery<TokenMintResponse, Error, TData>(["minterMetadataOnChainTokenMint", client.contractAddress, JSON.stringify(args)], () => client.tokenMint({
    tokenId: args.tokenId
  }), options);
}
export interface MinterMetadataOnChainMintCountQuery<TData> extends MinterMetadataOnChainReactQuery<MintCountResponse, TData> {
  args: {
    address: string;
  };
}
export function useMinterMetadataOnChainMintCountQuery<TData = MintCountResponse>({
  client,
  args,
  options
}: MinterMetadataOnChainMintCountQuery<TData>) {
  return useQuery<MintCountResponse, Error, TData>(["minterMetadataOnChainMintCount", client.contractAddress, JSON.stringify(args)], () => client.mintCount({
    address: args.address
  }), options);
}
export interface MinterMetadataOnChainMintPriceQuery<TData> extends MinterMetadataOnChainReactQuery<MintPriceResponse, TData> {}
export function useMinterMetadataOnChainMintPriceQuery<TData = MintPriceResponse>({
  client,
  options
}: MinterMetadataOnChainMintPriceQuery<TData>) {
  return useQuery<MintPriceResponse, Error, TData>(["minterMetadataOnChainMintPrice", client.contractAddress], () => client.mintPrice(), options);
}
export interface MinterMetadataOnChainStartTimeQuery<TData> extends MinterMetadataOnChainReactQuery<StartTimeResponse, TData> {}
export function useMinterMetadataOnChainStartTimeQuery<TData = StartTimeResponse>({
  client,
  options
}: MinterMetadataOnChainStartTimeQuery<TData>) {
  return useQuery<StartTimeResponse, Error, TData>(["minterMetadataOnChainStartTime", client.contractAddress], () => client.startTime(), options);
}
export interface MinterMetadataOnChainNumRemainingQuery<TData> extends MinterMetadataOnChainReactQuery<NumRemainingResponse, TData> {}
export function useMinterMetadataOnChainNumRemainingQuery<TData = NumRemainingResponse>({
  client,
  options
}: MinterMetadataOnChainNumRemainingQuery<TData>) {
  return useQuery<NumRemainingResponse, Error, TData>(["minterMetadataOnChainNumRemaining", client.contractAddress], () => client.numRemaining(), options);
}
export interface MinterMetadataOnChainNumMintedQuery<TData> extends MinterMetadataOnChainReactQuery<NumMintedResponse, TData> {}
export function useMinterMetadataOnChainNumMintedQuery<TData = NumMintedResponse>({
  client,
  options
}: MinterMetadataOnChainNumMintedQuery<TData>) {
  return useQuery<NumMintedResponse, Error, TData>(["minterMetadataOnChainNumMinted", client.contractAddress], () => client.numMinted(), options);
}
export interface MinterMetadataOnChainConfigQuery<TData> extends MinterMetadataOnChainReactQuery<ConfigResponse, TData> {}
export function useMinterMetadataOnChainConfigQuery<TData = ConfigResponse>({
  client,
  options
}: MinterMetadataOnChainConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["minterMetadataOnChainConfig", client.contractAddress], () => client.config(), options);
}
export interface MinterMetadataOnChainWithdrawMutation {
  client: MinterMetadataOnChainClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface MinterMetadataOnChainMintForMutation {
  client: MinterMetadataOnChainClient;
  msg: {
    recipient: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainMintForMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainMintForMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainMintForMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintFor(msg, fee, memo, funds), options);
}
export interface MinterMetadataOnChainMintToMutation {
  client: MinterMetadataOnChainClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainMintToMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainMintToMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintTo(msg, fee, memo, funds), options);
}
export interface MinterMetadataOnChainUpdateUnitPriceMutation {
  client: MinterMetadataOnChainClient;
  msg: {
    unitPrice: Coin;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainUpdateUnitPriceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainUpdateUnitPriceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainUpdateUnitPriceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateUnitPrice(msg, fee, memo, funds), options);
}
export interface MinterMetadataOnChainUpdatePerAddressLimitMutation {
  client: MinterMetadataOnChainClient;
  msg: {
    perAddressLimit: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainUpdatePerAddressLimitMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainUpdatePerAddressLimitMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainUpdatePerAddressLimitMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updatePerAddressLimit(msg, fee, memo, funds), options);
}
export interface MinterMetadataOnChainUpdateStartTimeMutation {
  client: MinterMetadataOnChainClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainUpdateStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainUpdateStartTimeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainUpdateStartTimeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateStartTime(msg, fee, memo, funds), options);
}
export interface MinterMetadataOnChainSetWhitelistMutation {
  client: MinterMetadataOnChainClient;
  msg: {
    whitelist: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainSetWhitelistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainSetWhitelistMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainSetWhitelistMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setWhitelist(msg, fee, memo, funds), options);
}
export interface MinterMetadataOnChainSetAdminMutation {
  client: MinterMetadataOnChainClient;
  msg: {
    admin: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainSetAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainSetAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setAdmin(msg, fee, memo, funds), options);
}
export interface MinterMetadataOnChainMintMutation {
  client: MinterMetadataOnChainClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainMintMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(fee, memo, funds), options);
}
export interface MinterMetadataOnChainUpsertTokenMetadatasMutation {
  client: MinterMetadataOnChainClient;
  msg: {
    tokenMetadatas: TokenMetadata[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterMetadataOnChainUpsertTokenMetadatasMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterMetadataOnChainUpsertTokenMetadatasMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterMetadataOnChainUpsertTokenMetadatasMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.upsertTokenMetadatas(msg, fee, memo, funds), options);
}