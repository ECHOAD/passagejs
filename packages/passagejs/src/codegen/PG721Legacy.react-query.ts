/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForNullable_Metadata, Metadata, Trait, ApprovalResponse, ApprovalsResponse, ContractInfoResponse, ExecuteMsg, Binary, MintMsgForNullable_Metadata, InstantiateMsg, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./PG721Legacy.types";
import { PG721LegacyQueryClient, PG721LegacyClient } from "./PG721Legacy.client";
export interface PG721LegacyReactQuery<TResponse, TData = TResponse> {
  client: PG721LegacyQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface PG721LegacyMinterQuery<TData> extends PG721LegacyReactQuery<MinterResponse, TData> {}
export function usePG721LegacyMinterQuery<TData = MinterResponse>({
  client,
  options
}: PG721LegacyMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(["pG721LegacyMinter", client.contractAddress], () => client.minter(), options);
}
export interface PG721LegacyAllTokensQuery<TData> extends PG721LegacyReactQuery<AllTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function usePG721LegacyAllTokensQuery<TData = AllTokensResponse>({
  client,
  args,
  options
}: PG721LegacyAllTokensQuery<TData>) {
  return useQuery<AllTokensResponse, Error, TData>(["pG721LegacyAllTokens", client.contractAddress, JSON.stringify(args)], () => client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface PG721LegacyTokensQuery<TData> extends PG721LegacyReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function usePG721LegacyTokensQuery<TData = TokensResponse>({
  client,
  args,
  options
}: PG721LegacyTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(["pG721LegacyTokens", client.contractAddress, JSON.stringify(args)], () => client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface PG721LegacyAllNftInfoQuery<TData> extends PG721LegacyReactQuery<AllNftInfoResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function usePG721LegacyAllNftInfoQuery<TData = AllNftInfoResponse>({
  client,
  args,
  options
}: PG721LegacyAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponse, Error, TData>(["pG721LegacyAllNftInfo", client.contractAddress, JSON.stringify(args)], () => client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface PG721LegacyNftInfoQuery<TData> extends PG721LegacyReactQuery<NftInfoResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function usePG721LegacyNftInfoQuery<TData = NftInfoResponse>({
  client,
  args,
  options
}: PG721LegacyNftInfoQuery<TData>) {
  return useQuery<NftInfoResponse, Error, TData>(["pG721LegacyNftInfo", client.contractAddress, JSON.stringify(args)], () => client.nftInfo({
    tokenId: args.tokenId
  }), options);
}
export interface PG721LegacyContractInfoQuery<TData> extends PG721LegacyReactQuery<ContractInfoResponse, TData> {}
export function usePG721LegacyContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options
}: PG721LegacyContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(["pG721LegacyContractInfo", client.contractAddress], () => client.contractInfo(), options);
}
export interface PG721LegacyNumTokensQuery<TData> extends PG721LegacyReactQuery<NumTokensResponse, TData> {}
export function usePG721LegacyNumTokensQuery<TData = NumTokensResponse>({
  client,
  options
}: PG721LegacyNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(["pG721LegacyNumTokens", client.contractAddress], () => client.numTokens(), options);
}
export interface PG721LegacyAllOperatorsQuery<TData> extends PG721LegacyReactQuery<AllOperatorsResponse, TData> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function usePG721LegacyAllOperatorsQuery<TData = AllOperatorsResponse>({
  client,
  args,
  options
}: PG721LegacyAllOperatorsQuery<TData>) {
  return useQuery<AllOperatorsResponse, Error, TData>(["pG721LegacyAllOperators", client.contractAddress, JSON.stringify(args)], () => client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface PG721LegacyApprovalsQuery<TData> extends PG721LegacyReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function usePG721LegacyApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options
}: PG721LegacyApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(["pG721LegacyApprovals", client.contractAddress, JSON.stringify(args)], () => client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface PG721LegacyApprovalQuery<TData> extends PG721LegacyReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function usePG721LegacyApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options
}: PG721LegacyApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(["pG721LegacyApproval", client.contractAddress, JSON.stringify(args)], () => client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }), options);
}
export interface PG721LegacyOwnerOfQuery<TData> extends PG721LegacyReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function usePG721LegacyOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options
}: PG721LegacyOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(["pG721LegacyOwnerOf", client.contractAddress, JSON.stringify(args)], () => client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface PG721LegacyBurnMutation {
  client: PG721LegacyClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePG721LegacyBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721LegacyBurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PG721LegacyBurnMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.burn(msg, fee, memo, funds), options);
}
export interface PG721LegacyMintMutation {
  client: PG721LegacyClient;
  msg: {
    extension?: Metadata;
    owner: string;
    tokenId: string;
    tokenUri?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePG721LegacyMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721LegacyMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PG721LegacyMintMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(msg, fee, memo, funds), options);
}
export interface PG721LegacyRevokeAllMutation {
  client: PG721LegacyClient;
  msg: {
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePG721LegacyRevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721LegacyRevokeAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PG721LegacyRevokeAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revokeAll(msg, fee, memo, funds), options);
}
export interface PG721LegacyApproveAllMutation {
  client: PG721LegacyClient;
  msg: {
    expires?: Expiration;
    operator: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePG721LegacyApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721LegacyApproveAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PG721LegacyApproveAllMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approveAll(msg, fee, memo, funds), options);
}
export interface PG721LegacyRevokeMutation {
  client: PG721LegacyClient;
  msg: {
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePG721LegacyRevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721LegacyRevokeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PG721LegacyRevokeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.revoke(msg, fee, memo, funds), options);
}
export interface PG721LegacyApproveMutation {
  client: PG721LegacyClient;
  msg: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePG721LegacyApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721LegacyApproveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PG721LegacyApproveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.approve(msg, fee, memo, funds), options);
}
export interface PG721LegacySendNftMutation {
  client: PG721LegacyClient;
  msg: {
    contract: string;
    msg: Binary;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePG721LegacySendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721LegacySendNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PG721LegacySendNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.sendNft(msg, fee, memo, funds), options);
}
export interface PG721LegacyTransferNftMutation {
  client: PG721LegacyClient;
  msg: {
    recipient: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function usePG721LegacyTransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, PG721LegacyTransferNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, PG721LegacyTransferNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transferNft(msg, fee, memo, funds), options);
}