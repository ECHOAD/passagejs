/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { ConfigResponse, Addr, Config, ExecuteMsg, InstantiateMsg, QueryMsg, Timestamp, Uint64, QueryOptionsForTokenTimestampOffset, TokenTimestampOffset } from "./Minter.types";
import { MinterQueryClient, MinterClient } from "./Minter.client";
export interface MinterReactQuery<TResponse, TData = TResponse> {
  client: MinterQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MinterVaultTokensByUnstakeTimestampQuery<TData> extends MinterReactQuery<VaultTokensByUnstakeTimestampResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useMinterVaultTokensByUnstakeTimestampQuery<TData = VaultTokensByUnstakeTimestampResponse>({
  client,
  args,
  options
}: MinterVaultTokensByUnstakeTimestampQuery<TData>) {
  return useQuery<VaultTokensByUnstakeTimestampResponse, Error, TData>(["minterVaultTokensByUnstakeTimestamp", client.contractAddress, JSON.stringify(args)], () => client.vaultTokensByUnstakeTimestamp({
    queryOptions: args.queryOptions
  }), options);
}
export interface MinterVaultTokensByStakeTimestampQuery<TData> extends MinterReactQuery<VaultTokensByStakeTimestampResponse, TData> {
  args: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useMinterVaultTokensByStakeTimestampQuery<TData = VaultTokensByStakeTimestampResponse>({
  client,
  args,
  options
}: MinterVaultTokensByStakeTimestampQuery<TData>) {
  return useQuery<VaultTokensByStakeTimestampResponse, Error, TData>(["minterVaultTokensByStakeTimestamp", client.contractAddress, JSON.stringify(args)], () => client.vaultTokensByStakeTimestamp({
    queryOptions: args.queryOptions
  }), options);
}
export interface MinterVaultTokensByOwnerQuery<TData> extends MinterReactQuery<VaultTokensByOwnerResponse, TData> {
  args: {
    owner: string;
    queryOptions: QueryOptionsForTokenTimestampOffset;
  };
}
export function useMinterVaultTokensByOwnerQuery<TData = VaultTokensByOwnerResponse>({
  client,
  args,
  options
}: MinterVaultTokensByOwnerQuery<TData>) {
  return useQuery<VaultTokensByOwnerResponse, Error, TData>(["minterVaultTokensByOwner", client.contractAddress, JSON.stringify(args)], () => client.vaultTokensByOwner({
    owner: args.owner,
    queryOptions: args.queryOptions
  }), options);
}
export interface MinterVaultTokenQuery<TData> extends MinterReactQuery<VaultTokenResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useMinterVaultTokenQuery<TData = VaultTokenResponse>({
  client,
  args,
  options
}: MinterVaultTokenQuery<TData>) {
  return useQuery<VaultTokenResponse, Error, TData>(["minterVaultToken", client.contractAddress, JSON.stringify(args)], () => client.vaultToken({
    tokenId: args.tokenId
  }), options);
}
export interface MinterWithdrawHooksQuery<TData> extends MinterReactQuery<WithdrawHooksResponse, TData> {}
export function useMinterWithdrawHooksQuery<TData = WithdrawHooksResponse>({
  client,
  options
}: MinterWithdrawHooksQuery<TData>) {
  return useQuery<WithdrawHooksResponse, Error, TData>(["minterWithdrawHooks", client.contractAddress], () => client.withdrawHooks(), options);
}
export interface MinterUnstakeHooksQuery<TData> extends MinterReactQuery<UnstakeHooksResponse, TData> {}
export function useMinterUnstakeHooksQuery<TData = UnstakeHooksResponse>({
  client,
  options
}: MinterUnstakeHooksQuery<TData>) {
  return useQuery<UnstakeHooksResponse, Error, TData>(["minterUnstakeHooks", client.contractAddress], () => client.unstakeHooks(), options);
}
export interface MinterStakeHooksQuery<TData> extends MinterReactQuery<StakeHooksResponse, TData> {}
export function useMinterStakeHooksQuery<TData = StakeHooksResponse>({
  client,
  options
}: MinterStakeHooksQuery<TData>) {
  return useQuery<StakeHooksResponse, Error, TData>(["minterStakeHooks", client.contractAddress], () => client.stakeHooks(), options);
}
export interface MinterConfigQuery<TData> extends MinterReactQuery<ConfigResponse, TData> {}
export function useMinterConfigQuery<TData = ConfigResponse>({
  client,
  options
}: MinterConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(["minterConfig", client.contractAddress], () => client.config(), options);
}
export interface MinterWithdrawMutation {
  client: MinterClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface MinterUnstakeMutation {
  client: MinterClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface MinterStakeMutation {
  client: MinterClient;
  msg: {
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterStakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stake(msg, fee, memo, funds), options);
}
export interface MinterRemoveWithdrawHookMutation {
  client: MinterClient;
  msg: {
    hook: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterRemoveWithdrawHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterRemoveWithdrawHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterRemoveWithdrawHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeWithdrawHook(msg, fee, memo, funds), options);
}
export interface MinterAddWithdrawHookMutation {
  client: MinterClient;
  msg: {
    hook: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterAddWithdrawHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterAddWithdrawHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterAddWithdrawHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addWithdrawHook(msg, fee, memo, funds), options);
}
export interface MinterRemoveUnstakeHookMutation {
  client: MinterClient;
  msg: {
    hook: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterRemoveUnstakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterRemoveUnstakeHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterRemoveUnstakeHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeUnstakeHook(msg, fee, memo, funds), options);
}
export interface MinterAddUnstakeHookMutation {
  client: MinterClient;
  msg: {
    hook: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterAddUnstakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterAddUnstakeHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterAddUnstakeHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addUnstakeHook(msg, fee, memo, funds), options);
}
export interface MinterRemoveStakeHookMutation {
  client: MinterClient;
  msg: {
    hook: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterRemoveStakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterRemoveStakeHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterRemoveStakeHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeStakeHook(msg, fee, memo, funds), options);
}
export interface MinterAddStakeHookMutation {
  client: MinterClient;
  msg: {
    hook: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterAddStakeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterAddStakeHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterAddStakeHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addStakeHook(msg, fee, memo, funds), options);
}
export interface MinterUpdateConfigMutation {
  client: MinterClient;
  msg: {
    label?: string;
    operators?: string[];
    unstakePeriod?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMinterUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MinterUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MinterUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}