/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Timestamp, Uint64, Uint128, ConfigResponse, Coin, ExecuteMsg, Decimal, InstantiateMsg, CreateMinterMsgForVendingMinterInitMsgExtension, CollectionParams, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, VendingMinterInitMsgExtension, MinterParamsForParamsExtension, ParamsExtension, MintCountResponse, MintPriceResponse, MintableNumTokensResponse, Addr, MinterConfigForConfigExtension, ConfigExtension, QueryMsg, StartTimeResponse } from "./VendingMinter.types";
import { VendingMinterQueryClient, VendingMinterClient } from "./VendingMinter.client";
export interface VendingMinterReactQuery<TResponse> {
  client: VendingMinterQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VendingMinterMintCountQuery extends VendingMinterReactQuery<MintCountResponse> {
  args: {
    address: string;
  };
}
export function useVendingMinterMintCountQuery({
  client,
  args,
  options
}: VendingMinterMintCountQuery) {
  return useQuery<MintCountResponse, Error, MintCountResponse, (string | undefined)[]>(["vendingMinterMintCount", client?.contractAddress, JSON.stringify(args)], () => client ? client.mintCount({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VendingMinterMintPriceQuery extends VendingMinterReactQuery<MintPriceResponse> {}
export function useVendingMinterMintPriceQuery({
  client,
  options
}: VendingMinterMintPriceQuery) {
  return useQuery<MintPriceResponse, Error, MintPriceResponse, (string | undefined)[]>(["vendingMinterMintPrice", client?.contractAddress], () => client ? client.mintPrice() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VendingMinterStartTimeQuery extends VendingMinterReactQuery<StartTimeResponse> {}
export function useVendingMinterStartTimeQuery({
  client,
  options
}: VendingMinterStartTimeQuery) {
  return useQuery<StartTimeResponse, Error, StartTimeResponse, (string | undefined)[]>(["vendingMinterStartTime", client?.contractAddress], () => client ? client.startTime() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VendingMinterMintableNumTokensQuery extends VendingMinterReactQuery<MintableNumTokensResponse> {}
export function useVendingMinterMintableNumTokensQuery({
  client,
  options
}: VendingMinterMintableNumTokensQuery) {
  return useQuery<MintableNumTokensResponse, Error, MintableNumTokensResponse, (string | undefined)[]>(["vendingMinterMintableNumTokens", client?.contractAddress], () => client ? client.mintableNumTokens() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VendingMinterConfigQuery extends VendingMinterReactQuery<ConfigResponse> {}
export function useVendingMinterConfigQuery({
  client,
  options
}: VendingMinterConfigQuery) {
  return useQuery<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>(["vendingMinterConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VendingMinterWithdrawMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterWithdrawMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(fee, memo, funds), options);
}
export interface VendingMinterShuffleMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterShuffleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterShuffleMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterShuffleMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.shuffle(fee, memo, funds), options);
}
export interface VendingMinterMintForMutation {
  client: VendingMinterClient;
  msg: {
    recipient: string;
    tokenId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterMintForMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintForMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterMintForMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintFor(msg, fee, memo, funds), options);
}
export interface VendingMinterMintToMutation {
  client: VendingMinterClient;
  msg: {
    recipient: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterMintToMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintToMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterMintToMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mintTo(msg, fee, memo, funds), options);
}
export interface VendingMinterUpdatePerAddressLimitMutation {
  client: VendingMinterClient;
  msg: {
    perAddressLimit: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterUpdatePerAddressLimitMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdatePerAddressLimitMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterUpdatePerAddressLimitMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updatePerAddressLimit(msg, fee, memo, funds), options);
}
export interface VendingMinterUpdateStartTimeMutation {
  client: VendingMinterClient;
  msg: Timestamp;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterUpdateStartTimeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterUpdateStartTimeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterUpdateStartTimeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateStartTime(msg, fee, memo, funds), options);
}
export interface VendingMinterSetWhitelistMutation {
  client: VendingMinterClient;
  msg: {
    whitelist: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterSetWhitelistMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterSetWhitelistMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterSetWhitelistMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setWhitelist(msg, fee, memo, funds), options);
}
export interface VendingMinterMintMutation {
  client: VendingMinterClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVendingMinterMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VendingMinterMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VendingMinterMintMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.mint(fee, memo, funds), options);
}