/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForEmpty, Empty, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, Decimal, CollectionInfoResponse, RoyaltyInfoResponse, ContractInfoResponse, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./SG721Base.types";
import { SG721BaseQueryClient } from "./SG721Base.client";
export interface SG721BaseReactQuery<TResponse> {
  client: SG721BaseQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface SG721BaseCollectionInfoQuery extends SG721BaseReactQuery<CollectionInfoResponse> {}
export function useSG721BaseCollectionInfoQuery({
  client,
  options
}: SG721BaseCollectionInfoQuery) {
  return useQuery<CollectionInfoResponse, Error, CollectionInfoResponse, (string | undefined)[]>(["sG721BaseCollectionInfo", client?.contractAddress], () => client ? client.collectionInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseMinterQuery extends SG721BaseReactQuery<MinterResponse> {}
export function useSG721BaseMinterQuery({
  client,
  options
}: SG721BaseMinterQuery) {
  return useQuery<MinterResponse, Error, MinterResponse, (string | undefined)[]>(["sG721BaseMinter", client?.contractAddress], () => client ? client.minter() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseAllTokensQuery extends SG721BaseReactQuery<AllTokensResponse> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useSG721BaseAllTokensQuery({
  client,
  args,
  options
}: SG721BaseAllTokensQuery) {
  return useQuery<AllTokensResponse, Error, AllTokensResponse, (string | undefined)[]>(["sG721BaseAllTokens", client?.contractAddress, JSON.stringify(args)], () => client ? client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseTokensQuery extends SG721BaseReactQuery<TokensResponse> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSG721BaseTokensQuery({
  client,
  args,
  options
}: SG721BaseTokensQuery) {
  return useQuery<TokensResponse, Error, TokensResponse, (string | undefined)[]>(["sG721BaseTokens", client?.contractAddress, JSON.stringify(args)], () => client ? client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseAllNftInfoQuery extends SG721BaseReactQuery<AllNftInfoResponse> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721BaseAllNftInfoQuery({
  client,
  args,
  options
}: SG721BaseAllNftInfoQuery) {
  return useQuery<AllNftInfoResponse, Error, AllNftInfoResponse, (string | undefined)[]>(["sG721BaseAllNftInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseNftInfoQuery extends SG721BaseReactQuery<NftInfoResponse> {
  args: {
    tokenId: string;
  };
}
export function useSG721BaseNftInfoQuery({
  client,
  args,
  options
}: SG721BaseNftInfoQuery) {
  return useQuery<NftInfoResponse, Error, NftInfoResponse, (string | undefined)[]>(["sG721BaseNftInfo", client?.contractAddress, JSON.stringify(args)], () => client ? client.nftInfo({
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseContractInfoQuery extends SG721BaseReactQuery<ContractInfoResponse> {}
export function useSG721BaseContractInfoQuery({
  client,
  options
}: SG721BaseContractInfoQuery) {
  return useQuery<ContractInfoResponse, Error, ContractInfoResponse, (string | undefined)[]>(["sG721BaseContractInfo", client?.contractAddress], () => client ? client.contractInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseNumTokensQuery extends SG721BaseReactQuery<NumTokensResponse> {}
export function useSG721BaseNumTokensQuery({
  client,
  options
}: SG721BaseNumTokensQuery) {
  return useQuery<NumTokensResponse, Error, NumTokensResponse, (string | undefined)[]>(["sG721BaseNumTokens", client?.contractAddress], () => client ? client.numTokens() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseAllOperatorsQuery extends SG721BaseReactQuery<AllOperatorsResponse> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useSG721BaseAllOperatorsQuery({
  client,
  args,
  options
}: SG721BaseAllOperatorsQuery) {
  return useQuery<AllOperatorsResponse, Error, AllOperatorsResponse, (string | undefined)[]>(["sG721BaseAllOperators", client?.contractAddress, JSON.stringify(args)], () => client ? client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseApprovalsQuery extends SG721BaseReactQuery<ApprovalsResponse> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721BaseApprovalsQuery({
  client,
  args,
  options
}: SG721BaseApprovalsQuery) {
  return useQuery<ApprovalsResponse, Error, ApprovalsResponse, (string | undefined)[]>(["sG721BaseApprovals", client?.contractAddress, JSON.stringify(args)], () => client ? client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseApprovalQuery extends SG721BaseReactQuery<ApprovalResponse> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useSG721BaseApprovalQuery({
  client,
  args,
  options
}: SG721BaseApprovalQuery) {
  return useQuery<ApprovalResponse, Error, ApprovalResponse, (string | undefined)[]>(["sG721BaseApproval", client?.contractAddress, JSON.stringify(args)], () => client ? client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface SG721BaseOwnerOfQuery extends SG721BaseReactQuery<OwnerOfResponse> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useSG721BaseOwnerOfQuery({
  client,
  args,
  options
}: SG721BaseOwnerOfQuery) {
  return useQuery<OwnerOfResponse, Error, OwnerOfResponse, (string | undefined)[]>(["sG721BaseOwnerOf", client?.contractAddress, JSON.stringify(args)], () => client ? client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}