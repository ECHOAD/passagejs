/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Decimal, Config, ExecuteMsg, Uint128, Token, InstantiateMsg, QueryMsg } from "./MarketplaceLegacy.types";
export interface MarketplaceLegacyReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  token: ({
    id
  }: {
    id: string;
  }) => Promise<TokenResponse>;
  rangeTokens: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<RangeTokensResponse>;
  listTokens: ({
    ids
  }: {
    ids: string[];
  }) => Promise<ListTokensResponse>;
  listTokensOnSale: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ListTokensOnSaleResponse>;
}
export class MarketplaceLegacyQueryClient implements MarketplaceLegacyReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.token = this.token.bind(this);
    this.rangeTokens = this.rangeTokens.bind(this);
    this.listTokens = this.listTokens.bind(this);
    this.listTokensOnSale = this.listTokensOnSale.bind(this);
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  token = async ({
    id
  }: {
    id: string;
  }): Promise<TokenResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token: {
        id
      }
    });
  };
  rangeTokens = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<RangeTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      range_tokens: {
        limit,
        start_after: startAfter
      }
    });
  };
  listTokens = async ({
    ids
  }: {
    ids: string[];
  }): Promise<ListTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_tokens: {
        ids
      }
    });
  };
  listTokensOnSale = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ListTokensOnSaleResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_tokens_on_sale: {
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface MarketplaceLegacyInterface extends MarketplaceLegacyReadOnlyInterface {
  contractAddress: string;
  sender: string;
  buy: ({
    recipient,
    tokenId
  }: {
    recipient?: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  listTokens: ({
    tokens
  }: {
    tokens: Token[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  delistTokens: ({
    tokens
  }: {
    tokens: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updatePrice: ({
    price,
    token
  }: {
    price: Uint128;
    token: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    allowedNative,
    collectorAddr,
    feePercentage,
    nftAddr
  }: {
    admin?: string;
    allowedNative?: string;
    collectorAddr?: string;
    feePercentage?: Decimal;
    nftAddr?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MarketplaceLegacyClient extends MarketplaceLegacyQueryClient implements MarketplaceLegacyInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.buy = this.buy.bind(this);
    this.listTokens = this.listTokens.bind(this);
    this.delistTokens = this.delistTokens.bind(this);
    this.updatePrice = this.updatePrice.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }
  buy = async ({
    recipient,
    tokenId
  }: {
    recipient?: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy: {
        recipient,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  listTokens = async ({
    tokens
  }: {
    tokens: Token[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      list_tokens: {
        tokens
      }
    }, fee, memo, _funds);
  };
  delistTokens = async ({
    tokens
  }: {
    tokens: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delist_tokens: {
        tokens
      }
    }, fee, memo, _funds);
  };
  updatePrice = async ({
    price,
    token
  }: {
    price: Uint128;
    token: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_price: {
        price,
        token
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    allowedNative,
    collectorAddr,
    feePercentage,
    nftAddr
  }: {
    admin?: string;
    allowedNative?: string;
    collectorAddr?: string;
    feePercentage?: Decimal;
    nftAddr?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        allowed_native: allowedNative,
        collector_addr: collectorAddr,
        fee_percentage: feePercentage,
        nft_addr: nftAddr
      }
    }, fee, memo, _funds);
  };
}