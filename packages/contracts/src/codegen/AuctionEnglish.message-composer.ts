/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Timestamp, Uint64, Addr, Uint128, AuctionStatus, AuctionResponse, Auction, AuctionBid, Coin, AuctionsResponse, Decimal, ConfigResponse, Config, ExecuteMsg, InstantiateMsg, QueryMsg, QueryOptionsForTokenTimestampOffset, TokenTimestampOffset, QueryOptionsForTokenPriceOffset, TokenPriceOffset } from "./AuctionEnglish.types";
export interface AuctionEnglishMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    bufferDuration,
    closedDuration,
    collectorAddress,
    maxDuration,
    minBidIncrement,
    minDuration,
    minPrice,
    operators,
    tradingFeeBps
  }: {
    bufferDuration?: number;
    closedDuration?: number;
    collectorAddress?: string;
    maxDuration?: number;
    minBidIncrement?: Uint128;
    minDuration?: number;
    minPrice?: Uint128;
    operators?: string[];
    tradingFeeBps?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setAuction: ({
    endTime,
    fundsRecipient,
    reservePrice,
    startTime,
    startingPrice,
    tokenId
  }: {
    endTime: Timestamp;
    fundsRecipient?: string;
    reservePrice?: Coin;
    startTime: Timestamp;
    startingPrice: Coin;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setAuctionBid: ({
    price,
    tokenId
  }: {
    price: Coin;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  closeAuction: ({
    acceptHighestBid,
    tokenId
  }: {
    acceptHighestBid: boolean;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  finalizeAuction: ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  voidAuction: ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class AuctionEnglishMsgComposer implements AuctionEnglishMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.setAuction = this.setAuction.bind(this);
    this.setAuctionBid = this.setAuctionBid.bind(this);
    this.closeAuction = this.closeAuction.bind(this);
    this.finalizeAuction = this.finalizeAuction.bind(this);
    this.voidAuction = this.voidAuction.bind(this);
  }
  updateConfig = ({
    bufferDuration,
    closedDuration,
    collectorAddress,
    maxDuration,
    minBidIncrement,
    minDuration,
    minPrice,
    operators,
    tradingFeeBps
  }: {
    bufferDuration?: number;
    closedDuration?: number;
    collectorAddress?: string;
    maxDuration?: number;
    minBidIncrement?: Uint128;
    minDuration?: number;
    minPrice?: Uint128;
    operators?: string[];
    tradingFeeBps?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            buffer_duration: bufferDuration,
            closed_duration: closedDuration,
            collector_address: collectorAddress,
            max_duration: maxDuration,
            min_bid_increment: minBidIncrement,
            min_duration: minDuration,
            min_price: minPrice,
            operators,
            trading_fee_bps: tradingFeeBps
          }
        })),
        funds: _funds
      })
    };
  };
  setAuction = ({
    endTime,
    fundsRecipient,
    reservePrice,
    startTime,
    startingPrice,
    tokenId
  }: {
    endTime: Timestamp;
    fundsRecipient?: string;
    reservePrice?: Coin;
    startTime: Timestamp;
    startingPrice: Coin;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_auction: {
            end_time: endTime,
            funds_recipient: fundsRecipient,
            reserve_price: reservePrice,
            start_time: startTime,
            starting_price: startingPrice,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  setAuctionBid = ({
    price,
    tokenId
  }: {
    price: Coin;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_auction_bid: {
            price,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  closeAuction = ({
    acceptHighestBid,
    tokenId
  }: {
    acceptHighestBid: boolean;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          close_auction: {
            accept_highest_bid: acceptHighestBid,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  finalizeAuction = ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          finalize_auction: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  voidAuction = ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          void_auction: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
}