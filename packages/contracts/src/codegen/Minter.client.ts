/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ConfigResponse, Addr, Config, ExecuteMsg, InstantiateMsg, QueryMsg, Timestamp, Uint64, QueryOptionsForTokenTimestampOffset, TokenTimestampOffset } from "./Minter.types";
export interface MinterReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  stakeHooks: () => Promise<StakeHooksResponse>;
  unstakeHooks: () => Promise<UnstakeHooksResponse>;
  withdrawHooks: () => Promise<WithdrawHooksResponse>;
  vaultToken: ({
    tokenId
  }: {
    tokenId: string;
  }) => Promise<VaultTokenResponse>;
  vaultTokensByOwner: ({
    owner,
    queryOptions
  }: {
    owner: string;
    queryOptions: QueryOptionsForTokenTimestampOffset;
  }) => Promise<VaultTokensByOwnerResponse>;
  vaultTokensByStakeTimestamp: ({
    queryOptions
  }: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  }) => Promise<VaultTokensByStakeTimestampResponse>;
  vaultTokensByUnstakeTimestamp: ({
    queryOptions
  }: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  }) => Promise<VaultTokensByUnstakeTimestampResponse>;
}
export class MinterQueryClient implements MinterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.stakeHooks = this.stakeHooks.bind(this);
    this.unstakeHooks = this.unstakeHooks.bind(this);
    this.withdrawHooks = this.withdrawHooks.bind(this);
    this.vaultToken = this.vaultToken.bind(this);
    this.vaultTokensByOwner = this.vaultTokensByOwner.bind(this);
    this.vaultTokensByStakeTimestamp = this.vaultTokensByStakeTimestamp.bind(this);
    this.vaultTokensByUnstakeTimestamp = this.vaultTokensByUnstakeTimestamp.bind(this);
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  stakeHooks = async (): Promise<StakeHooksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      stake_hooks: {}
    });
  };
  unstakeHooks = async (): Promise<UnstakeHooksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      unstake_hooks: {}
    });
  };
  withdrawHooks = async (): Promise<WithdrawHooksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      withdraw_hooks: {}
    });
  };
  vaultToken = async ({
    tokenId
  }: {
    tokenId: string;
  }): Promise<VaultTokenResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_token: {
        token_id: tokenId
      }
    });
  };
  vaultTokensByOwner = async ({
    owner,
    queryOptions
  }: {
    owner: string;
    queryOptions: QueryOptionsForTokenTimestampOffset;
  }): Promise<VaultTokensByOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_tokens_by_owner: {
        owner,
        query_options: queryOptions
      }
    });
  };
  vaultTokensByStakeTimestamp = async ({
    queryOptions
  }: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  }): Promise<VaultTokensByStakeTimestampResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_tokens_by_stake_timestamp: {
        query_options: queryOptions
      }
    });
  };
  vaultTokensByUnstakeTimestamp = async ({
    queryOptions
  }: {
    queryOptions: QueryOptionsForTokenTimestampOffset;
  }): Promise<VaultTokensByUnstakeTimestampResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_tokens_by_unstake_timestamp: {
        query_options: queryOptions
      }
    });
  };
}
export interface MinterInterface extends MinterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    label,
    operators,
    unstakePeriod
  }: {
    label?: string;
    operators?: string[];
    unstakePeriod?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addStakeHook: ({
    hook
  }: {
    hook: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeStakeHook: ({
    hook
  }: {
    hook: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addUnstakeHook: ({
    hook
  }: {
    hook: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeUnstakeHook: ({
    hook
  }: {
    hook: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addWithdrawHook: ({
    hook
  }: {
    hook: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeWithdrawHook: ({
    hook
  }: {
    hook: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  stake: ({
    tokenId
  }: {
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unstake: ({
    tokenId
  }: {
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    tokenId
  }: {
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MinterClient extends MinterQueryClient implements MinterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.addStakeHook = this.addStakeHook.bind(this);
    this.removeStakeHook = this.removeStakeHook.bind(this);
    this.addUnstakeHook = this.addUnstakeHook.bind(this);
    this.removeUnstakeHook = this.removeUnstakeHook.bind(this);
    this.addWithdrawHook = this.addWithdrawHook.bind(this);
    this.removeWithdrawHook = this.removeWithdrawHook.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }
  updateConfig = async ({
    label,
    operators,
    unstakePeriod
  }: {
    label?: string;
    operators?: string[];
    unstakePeriod?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        label,
        operators,
        unstake_period: unstakePeriod
      }
    }, fee, memo, _funds);
  };
  addStakeHook = async ({
    hook
  }: {
    hook: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_stake_hook: {
        hook
      }
    }, fee, memo, _funds);
  };
  removeStakeHook = async ({
    hook
  }: {
    hook: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_stake_hook: {
        hook
      }
    }, fee, memo, _funds);
  };
  addUnstakeHook = async ({
    hook
  }: {
    hook: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_unstake_hook: {
        hook
      }
    }, fee, memo, _funds);
  };
  removeUnstakeHook = async ({
    hook
  }: {
    hook: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_unstake_hook: {
        hook
      }
    }, fee, memo, _funds);
  };
  addWithdrawHook = async ({
    hook
  }: {
    hook: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_withdraw_hook: {
        hook
      }
    }, fee, memo, _funds);
  };
  removeWithdrawHook = async ({
    hook
  }: {
    hook: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_withdraw_hook: {
        hook
      }
    }, fee, memo, _funds);
  };
  stake = async ({
    tokenId
  }: {
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake: {
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  unstake = async ({
    tokenId
  }: {
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  withdraw = async ({
    tokenId
  }: {
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
}